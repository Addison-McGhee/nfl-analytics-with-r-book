[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to NFL Analytics Using R",
    "section": "",
    "text": "Please note: this book is currently in the writing process. Chapters that are completed are to be considered a rough draft. Other chapters, while listed in the table of content to the left, have yet to be worked on. As noted below, this title is currently under contract with CRC Press with a submission deadline of December 31, 2022. The full online version will be “official” and live at that point, with the hard copy of the book coming in early 2023.\nAs this book is published online, it allows me to continue real-time development of it. Because of this, make note of the following:"
  },
  {
    "objectID": "index.html#overview-of-chapters",
    "href": "index.html#overview-of-chapters",
    "title": "An Introduction to NFL Analytics Using R",
    "section": "\n1.1 Overview of Chapters",
    "text": "1.1 Overview of Chapters\n\nChapter 1 provides an overview of the nflverse with specific attention paid to the difference between using nflfastR versus nflreadr. Serving as the first dive into analytics, the chapter showcases how to use nflreadr to retrieve both compiled weekly NFL stats and the deeply robust play-by-play statistics. In both cases, exercises are provided. Readers will do their first coding by, first, using the weekly stats to determine the 2021 leaders in air yards per attempt. Second, readers will use the play-by-play statistics from the 2021 season to create a brand new metric (QB aggressiveness on 3rd down pass attempts). Afterward, readers will learn how to retrieve multiple seasons of data at once.\nChapter 2 covers the process of downloading both R and RStudio, as well as the necessary packages to do NFL analytics. As one of the most important chapters in the book (especially for those new to the R programming language), readers take a deep dive into wrangling NFL data with the tidyverse package. To begin, readers will learn about the dplyr pipe (%>%) and use, in exercises, the six most important verbs in the dplyr language: filer(), select(), arrange(), summarize(), mutate(), and group_by(). At the conclusion of the chapter, multiple exercises are provided to allow readers to practice using the dplyr verbs, relational operators within the filter() function and creating “new stats” by using the summarize() function. Moreover, readers will determine the relationship between the dplyr language and important variables within the nflverse data such as player_name and player_id, which is important for correct manipulation and cleaning of data.\nChapter 3 examines the numerous and, often, bewildering amount of functions “underneath the hood” of the packages that makes up the nflverse. For example, load_pbp() and load_player_stats() are included in both nflfastR and nflreadr. However, load_nextgen_stats(), load_pfr_stats(), and load_contracts() are all part of just nflreadr. Because of this complexity, readers will learn how to efficiently operate within the nflverse. Moreover, chapter 3 provides dozens of examples and exercises related to all of the various functions included. For example, readers will learn to use load_nextgen_stats() to determine which running backs get to the line of scrimmage the quickest and will use load_pfr_stats() to explore advanced defensive metrics across multiple seasons.\nChapter 4 moves readers from data cleaning and manipulation to an introduction to data visualization using ggplot2. As well, chapter 4 provides further instruction on nflverse functions such as clean_player_names(), clean_team_abbrs(), and clean_homeaway(). As well, to prep for data visualization, readers will be introduced to the teams_colors_logos and load_rosters functions as well as the nflplotR package, which provides “functions and geoms to help visualization of NFL related analysis” (Carl 2022). Readers will produce multiple types of visualizations, including geom_bar, geom_point, geom_density, and more. As well, readers will learn to use facet_wrap and facet_grid to display data over multiple seasons. For visualizations that include team logos or player headshots, instruction will cover both how to do the coding manually using teams_colors_logos or load_rosters and to use the nflplotr package to avoid the need to use left_join to merge teams_colors_logos to your dataframe.\nChapter 5 introduces advanced methods in R using nflverse data, with a specific focus on modeling and machine learning. To streamline the process of learning, readers will be introduced to tidymodels, a “collection of packages for modeling and machine learning using tidyverse principles” (Silge, n.d.). As an example, readers will first be introduced to Tej Seth’s Rushing Yards Over Expected model (GitHub, ShinyApp). The model will serve as a learning tool to help readers understand the relationship between nflfastR data and machine learning (in Tej’s case, an xgboost model). Afterward, specific attention is given to binary classification, multiclass classification, and regression computer learning models. At the conclusion of the chapter, readers will be provided exercises to allow them to develop their own supervised and unsupervised machine learning models.\nChapter 6 introduces data from sources outside of the nflverse, including premium statistics from Pro Football Focus and Sports Info Solutions. Readers will learned to use various functions, such as clean_team_names, in order to prepare the data to merge with data from the nflverse. As well, this chapter will introduce readers to working with player tracking data. To do so, data will be provided from the NFL’s Big Data Bowl. To highlight the work being completed using player tracking, this chapter will discuss the Big Data Bowl entries of Matt Ploenzke (The Importance of Ball Carrier Downfield Acceleration and Unblocked Tackler Distance and Spacing) and the team of Kellin Rumsey & Brandon DeFlon (The Battle Between Blocker and Defender Is Often Decided by Leverage)."
  },
  {
    "objectID": "index.html#about-the-author",
    "href": "index.html#about-the-author",
    "title": "An Introduction to NFL Analytics Using R",
    "section": "About The Author",
    "text": "About The Author\nI (Bradley Congelio) am currently an Assistant Professor in the College of Business at Kutztown University of Pennsylvania. Aside from my core area of instruction, I also instruct the very popular Sport Analytics (SPT 313) course.\nI earned my Ph.D. from the University of Western Ontario and received a specialized certificate in R for Data Analytics from the University of California, San Diego in 2021. I am a proud undergraduate alumni of West Liberty University and am a strong advocate of a broad-based liberal arts education.\nMy research focuses on using big data, the R programming language, and analytics to explore the impact of professional stadiums on neighboring communities. I use the proprietary Zillow ZTRAX database as well as U.S. Census and other forms of data to create robust, applied, and useful insight into how best to protect those living in areas where stadiums are proposed for construction.\nAs well, my work in sport analytics, specifically the NFL, has been featured on numerous media outlets, including the USA Today and Sports Illustrated.\nFinally, my most recent academic, peer-reviewed publications include:\n\nCongelio, B. (2022). ’Examining the Impact of New Stadium Construction on Local Property Prices Using Data Analytics and the Zillow ZTRAX Database.” Journal of Business, Economics, and Technology Spring 2022, 39-55.\nCongelio, B. (2021). “Monitoring the Policing of Olympic Host Cities: A Novel Approach Using Data Analytics and the LA2028 Olympic Summer Games.” Journal of Olympic Studies 2(2), 129-145.\nCongelio, B. “Predicting the Impact of a New Stadium on Surrounding Neighborhoods Through the Use of a k-means Unsupervised Clustering Algorithm.” Currently under peer review.\nCongelio, B. “Examining Megaevent’s Impact on Foot Traffic to Local Businesses Using Mobility and Demographic Aggregation Data.” Currently under peer review and funded by a $15,000 grant.\n\n\n1.1.1 Why A Book Instead of Working in Analytics?\nI am sometimes asked why I spend time in the classroom teaching this material rather than taking my domain knowledge to the “industry side” and working in the NFL or an otherwise NFL-connected outlet.\nThe honest and, likely boring, answer is this: I love teaching. My favorite experience in the classroom yet is always in my Sport Analytics course. The frustration and sense of helplessness is palpable in the first weeks of the semester as students attempt to wrap their head around, what a former student called, “this [censored] foreign language.” I insist that they keep pushing through the exercises and assignments. Often, there is line out my door and extending down the hallway during office hours comprised of just students from the Sport Analytics class.\nAnd then something amazing happens.\nTypically about halfway through the semester, I start seeing the light bulbs go off. Instead of cursing in anger at the “foreign language,” students begin randomly cursing in excitement as the flow of the tidyverse language “clicks.” Once that happens, it is off to the races because, once they understand speaking in tidyverse, learning more difficult packages (like tidymodels) seems doable.\nAnd that is why I teach. That moment where I realize my lecturing, assisting, explaining, and gentle nudging are all finally paying dividends - not for me, though. For the students.\nThis book serves as an extension of that classroom experience. As a reader of this book, you are now a “student” and I hope you do not hesitate to reach out to me if you ever have any questions or, more importantly, when (not if) you have that “light bulb moment” and everything begins to click for you."
  },
  {
    "objectID": "index.html#technical-details",
    "href": "index.html#technical-details",
    "title": "An Introduction to NFL Analytics Using R",
    "section": "Technical Details",
    "text": "Technical Details\nThis book was written using RStudio’s Visual Editor for R Markdown. It was published using the Quarto publishing system built on Pandoc. As well, the following packages were used in this book:\n\n\n\n\nPackages Used In This Book\n \n package \n    version \n    source \n  \n\n\n dplyr \n    1.0.8 \n    CRAN (R 4.1.2) \n  \n\n ggplot2 \n    3.3.5 \n    CRAN (R 4.1.0) \n  \n\n gt \n    0.6.0.9000 \n    Github (rstudio/gt\\@035c64b0a03f0372750095a7d390edcea4192b91) \n  \n\n nflfastR \n    4.3.0 \n    CRAN (R 4.1.1) \n  \n\n nflreadr \n    1.2.0.07 \n    https://nflverse.r-universe.dev (R 4.1.3) \n  \n\n nflverse \n    1.0.1 \n    CRAN (R 4.1.3) \n  \n\n scales \n    1.2.0 \n    CRAN (R 4.1.3) \n  \n\n tidymodels \n    0.2.0 \n    CRAN (R 4.1.3) \n  \n\n tidyverse \n    1.3.1 \n    CRAN (R 4.1.1) \n  \n\n webshot \n    0.5.2 \n    CRAN (R 4.1.1) \n  \n\n\n\n\nFinally, please note that this book uses the dplyr pipe operator (%>%) as opposed to the new, built-in pipe operator released with version 4.1 of R (|>). It is likely that you can work through the exercises and examples in this book by using either operator. I maintain my use of the dplyr pipe operator for no other reason than personal preference."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "An Introduction to NFL Analytics Using R",
    "section": "\n1.2 License",
    "text": "1.2 License\nThe online version of this book is published with the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0) license.\n\n\n\n\nAwbrey, Jake. 2020. “The Future of NFL Analytics.” https://www.samford.edu/sports-analytics/fans/2020/The-Future-of-NFL-Data-Analytics.\n\n\nBechtold, Taylor. 2021. “How the Analytics Movement Has Changed the NFL and Where It Has Fallen Short.” https://theanalyst.com/na/2021/04/evolution-of-the-analytics-movement-in-the-nfl/.\n\n\n“Big Data Bowl: The Annual Analytics Contest Explores Statistical Innovations in Football.” n.d. https://operations.nfl.com/gameday/analytics/big-data-bowl/.\n\n\nBushnell, Henry. 2021. “NFL Teams Are Taking 4th-down Risks More Than Ever - but Still Not Often Enough.” https://sports.yahoo.com/nfl-teams-are-taking-4th-down-risks-more-than-ever-but-still-not-often-enough-163650973.html.\n\n\nCarl, Sebastian. 2022. “nflplotR.” https://nflplotr.nflverse.com/.\n\n\nFortier, Sam. 2020. “The NFL’s Analytics Movement Has Finally Reached the Sport’s Mainstream.” https://www.washingtonpost.com/sports/2020/01/16/nfls-analytics-movement-has-finally-reached-sports-mainstream/.\n\n\nHeifetz, Danney. 2019. “We Salute You, Founding Father of the NFL’s Analytics Movement.” https://www.theringer.com/nfl-preview/2019/8/15/20806241/nfl-analytics-pro-football-focus.\n\n\nKozora, Alex. 2015. “Tomlin Prefers \"Feel over Analytics\".” http://steelersdepot.com/2015/09/tomlin-prefers-feel-over-analytics/.\n\n\nRosenthal, Gregg. 2018. “Super Bowl LII: How the 2017 Philadelphia Eagles Were Built.” https://www.nfl.com/news/super-bowl-lii-how-the-2017-philadelphia-eagles-were-built-0ap3000000912753.\n\n\nSilge, Julia. n.d. “Tidymodels.” https://tidymodels.org."
  },
  {
    "objectID": "01-nfl-analytics-and-r.html",
    "href": "01-nfl-analytics-and-r.html",
    "title": "\n2  An Introduction to NFL Analytics and the R Programming Language\n",
    "section": "",
    "text": "As mentioned in the Preface of this book, the nflverse has drastically expanded since the inception of nflfastR in April of 2020. In total, the current version of the nflverse is comprised of five separate R packages:\nInstalling the nflverse as a package in R will automatically install all five packages. However, the core focus of this book will be on nflreadr. It is understandable if you are confused by that, since the Preface of this book introduced the nflfastR package. The nflreadr package, as explained by its author (Tan Ho), is a “minimal package for downloading data from nflverse repositories.” The data that is the nflverse is stored across five different GitHub repositories. Using nflreadr allows for easy access to any of these data sources. For lack of a better term, nflreadr acts as a shortcut of sorts while also operating with less dependencies.\nAs you will see in this chapter, using nflreadr:: while coding provides nearly identical functions to those available when using nflfastR::. In fact, nflfastR::, in many instances, now calls, “under the hood,” the equivalent function in nflreadr::. Because of the coalescing between the two, many of the new functions being developed are available only when using nflreadr::. For example, nflreadr:: allows you to access data pertaining to the NFL Combine, draft picks, contracts, trades, injury information, and access to statistics on Pro Football Reference.\nWhile nflfastR did initially serve as the foundation of the “amateur NFL analytics” movement, the nflreadr package has superseded it and now serves as the “catchall” package for all the various bits and pieces of the nflverse. Because of this, and to maintain consistency throughout, this book - nearly exclusively - will use nflreadr:: when calling functions housed within the nflverse rather than nflfastR::.\nThe below diagram visualizes the relationship between nflfastR and nflreadr.\nThe purpose of this chapter is to explore nflreadr data in an introductory fashion using, what I believe, are the two most important functions in the nflverse: (1.) load_player_stats() and (2.) load_pbp(). It makes the assumption that you are versed in the R programming language. If you are not, please start with Chapter 2 where you can learn about R and the tidyverse language using examples from the nflverse."
  },
  {
    "objectID": "01-nfl-analytics-and-r.html#nflreadr-an-introduction-to-the-data",
    "href": "01-nfl-analytics-and-r.html#nflreadr-an-introduction-to-the-data",
    "title": "\n2  An Introduction to NFL Analytics and the R Programming Language\n",
    "section": "\n2.1 nflreadr: An Introduction to the Data",
    "text": "2.1 nflreadr: An Introduction to the Data\nThe most important part of the nflverse is, of course, the data. To begin, we will examine the core data that underpins the nflverse: weekly player stats and the more detailed play-by–play data. Using nflreadr, the end user is able to collect weekly top-level stats via the load_player_stats() function or the much more robust play-by-play numbers by using the load_pbp() function.\nAs you may imagine, there is a very important distinction between the load_player_stats() and load_pbp(). As mentioned, load_player_stats() will provide you with weekly, pre-calculated statistics for either offense or kicking. Conversely, load_pbp() will provide over 350 metrics for every single play of every single game dating back to 1999.\nThe load_player_stats() function includes the following offensive information:\n\noffensive.stats <- nflreadr::load_player_stats(2021)\nls(offensive.stats)\n\n [1] \"air_yards_share\"             \"attempts\"                   \n [3] \"carries\"                     \"completions\"                \n [5] \"dakota\"                      \"fantasy_points\"             \n [7] \"fantasy_points_ppr\"          \"interceptions\"              \n [9] \"pacr\"                        \"passing_2pt_conversions\"    \n[11] \"passing_air_yards\"           \"passing_epa\"                \n[13] \"passing_first_downs\"         \"passing_tds\"                \n[15] \"passing_yards\"               \"passing_yards_after_catch\"  \n[17] \"player_id\"                   \"player_name\"                \n[19] \"racr\"                        \"receiving_2pt_conversions\"  \n[21] \"receiving_air_yards\"         \"receiving_epa\"              \n[23] \"receiving_first_downs\"       \"receiving_fumbles\"          \n[25] \"receiving_fumbles_lost\"      \"receiving_tds\"              \n[27] \"receiving_yards\"             \"receiving_yards_after_catch\"\n[29] \"recent_team\"                 \"receptions\"                 \n[31] \"rushing_2pt_conversions\"     \"rushing_epa\"                \n[33] \"rushing_first_downs\"         \"rushing_fumbles\"            \n[35] \"rushing_fumbles_lost\"        \"rushing_tds\"                \n[37] \"rushing_yards\"               \"sack_fumbles\"               \n[39] \"sack_fumbles_lost\"           \"sack_yards\"                 \n[41] \"sacks\"                       \"season\"                     \n[43] \"season_type\"                 \"special_teams_tds\"          \n[45] \"target_share\"                \"targets\"                    \n[47] \"week\"                        \"wopr\"                       \n\n\nAs well, switching the stat_type to “kicking” provides the following information:\n\nkicking.stats <- nflreadr::load_player_stats(2021, stat_type = \"kicking\")\nls(kicking.stats)\n\n [1] \"fg_att\"              \"fg_blocked\"          \"fg_blocked_distance\"\n [4] \"fg_blocked_list\"     \"fg_long\"             \"fg_made\"            \n [7] \"fg_made_0_19\"        \"fg_made_20_29\"       \"fg_made_30_39\"      \n[10] \"fg_made_40_49\"       \"fg_made_50_59\"       \"fg_made_60_\"        \n[13] \"fg_made_distance\"    \"fg_made_list\"        \"fg_missed\"          \n[16] \"fg_missed_0_19\"      \"fg_missed_20_29\"     \"fg_missed_30_39\"    \n[19] \"fg_missed_40_49\"     \"fg_missed_50_59\"     \"fg_missed_60_\"      \n[22] \"fg_missed_distance\"  \"fg_missed_list\"      \"fg_pct\"             \n[25] \"gwfg_att\"            \"gwfg_blocked\"        \"gwfg_distance\"      \n[28] \"gwfg_made\"           \"gwfg_missed\"         \"pat_att\"            \n[31] \"pat_blocked\"         \"pat_made\"            \"pat_missed\"         \n[34] \"pat_pct\"             \"player_id\"           \"player_name\"        \n[37] \"season\"              \"season_type\"         \"team\"               \n[40] \"week\"               \n\n\nWhile the data returned is not as rich as the play-by-play data we will covering next, the load_player_stats() function is extremely helpful when you need to quickly (and correctly!) recreate the official stats listed on either the NFL’s website or on Pro Football Reference.\nAs an example, let’s say you need to get Ben Roethlisberger’s total passing yard and attempts from the 2021 season. You could do so via load_pbp() but, if you do not need further context, using load_player_stats() is much more efficient.\n\n2.1.1 Getting Weekly Player Stats via load_player_stats()\n\nIf you are familiar with R, it might seem logical to do the following to get Roethlisberger’s total passing yards and number of attempts from the 2021 regular season:\n\nweekly.data <- nflreadr::load_player_stats(2021)\n\nben.weekly <- weekly.data %>%\n  group_by(player_id, player_name) %>%\n  filter(season_type == \"REG\" & player_name == \"B.Roethlisberger\") %>%\n  summarize(total.yards = sum(passing_yards),\n            n.attempts = sum(attempts))\n\n`summarise()` has grouped output by 'player_id'. You can override using the\n`.groups` argument.\n\ntibble(ben.weekly)\n\n# A tibble: 1 x 4\n  player_id  player_name      total.yards n.attempts\n  <chr>      <chr>                  <dbl>      <int>\n1 00-0022924 B.Roethlisberger        3740        605\n\n\nAs you can see in the ben.weekly output, we have matched his official 2021 regular stats perfectly with 3,740 passing yards on 605 attempts. The code we just created is doing several things. First, we are using nflreadr::load_player_stats(2021) to place the data into our R environment in a DF titled weekly.data.\nNext, we group the data together by alike player_id (as every individual player has a unique ID number) as well as the player’s actual name. At the filtering level, we are looking for just the regular season (REG) within season_type and also removing all quarterbacks except for Ben Roethlisberger. It is important to note that player names are just first initial and last name, without a space after the period.\nAfter filtering for the regular season, we are able to summarize all of the weekly data into combined statistics by summing the weekly totals of passing yards and attempts.\nHowever, filtering by player_name can lead to significant issues with your results. An excellent example of this is Josh Allen. Let’s recreate the code above that successfully provided Roethlisberger’s stats, but replace Ben with Josh Allen:\n\njosh.allen <- weekly.data %>%\n  group_by(player_name) %>%\n  filter(player_name == \"J.Allen\" & season_type == \"REG\") %>%\n  summarize(total.yards = sum(passing_yards),\n            n.attempts = sum(attempts))\n\ntibble(josh.allen)\n\n# A tibble: 1 x 3\n  player_name total.yards n.attempts\n  <chr>             <dbl>      <int>\n1 J.Allen            4049        603\n\n\nThe output tells us Allen threw for 4,049 yards on 603 attempts during the 2021 regular season. A check of his Pro Football Reference page tells us those numbers are incorrect. In fact, he had 4,407 passing yards on 646 attempts. How did we end up 358 passing yards and 43 attempts short?\nThe answer comes from Aaron Schatz, the creator of Football Outsiders, who explained in a Tweet that the official Buffalo Bills’ scorer, during week 3 of the NFL season, decided to refer to Allen as “Jos.Allen” as a result of the Washington Commanders having a player named “Jonathan Allen.”\nTo double check this, we can run the same code as above, but remove the player_name filter and switch to searching for just those players on the Buffalo Bills by using recent_team.\n\ntwo.josh.allens <- weekly.data %>%\n  group_by(player_id, player_name) %>%\n  filter(season_type == \"REG\" & recent_team == \"BUF\") %>%\n  summarize(total.yards = sum(passing_yards),\n            n.attempts = sum(attempts))\n\n`summarise()` has grouped output by 'player_id'. You can override using the\n`.groups` argument.\n\ntibble(two.josh.allens)\n\n# A tibble: 17 x 4\n   player_id  player_name  total.yards n.attempts\n   <chr>      <chr>              <dbl>      <int>\n 1 00-0027685 E.Sanders              0          0\n 2 00-0029000 C.Beasley              0          1\n 3 00-0031588 S.Diggs                0          0\n 4 00-0031787 J.Kumerow              0          0\n 5 00-0033308 M.Breida               0          0\n 6 00-0033466 I.McKenzie             0          0\n 7 00-0033550 D.Webb                 0          0\n 8 00-0033869 M.Trubisky            43          8\n 9 00-0033904 D.Dawkins              0          0\n10 00-0034857 J.Allen             4049        603\n11 00-0034857 Jos.Allen            358         43\n12 00-0035250 D.Singletary           0          0\n13 00-0035308 T.Sweeney              0          0\n14 00-0035689 D.Knox                 0          0\n15 00-0036187 R.Gilliam              0          0\n16 00-0036196 G.Davis                0          0\n17 00-0036251 Z.Moss                 0          0\n\n\nGrouping by player_id and player_name (as well as filtering down to Buffalo), we can see that, indeed, Josh Allen is in the data twice under the same player_id. Moreover, if you do the math, you can see that the numbers from his two entries add up to the official statistics on his Pro Football Reference page.\n\n2.1.1.1 Using load_player_stats() Correctly\nTo avoid these situations, you could load up NFL rosters via the nflreadr::load_rosters() function, but that would require unnecessary code in order to merge the two DFs together by matching the player_id to the gsis_id number found within the roster information. Doing so would correct the above issue of Josh Allen appearing in the data under different spellings. Instead, and to write the minimal amount of code to complete the task, we can do the following:\n\njosh.allen <- weekly.data %>%\n  filter(season_type == \"REG\") %>%\n  group_by(player_id) %>%\n  summarize(player_name = first(player_name),\n            total.yards = sum(passing_yards),\n            n.attempts = sum(attempts)) %>%\n  filter(player_name == \"J.Allen\")\n\nThe most efficient way to gather correct player statistics is to do the group_by with ONLY the player_id as, despite the variation in name, the player_id remained the same for Josh Allen. In order to include his correct name in the output, we can gather QB names within the summarize prior to calculating the sum of passing_yards and attempts. After, if you desire to see only Josh Allen’s number, you can filter out to just his name.\n\n2.1.2 Using load_player_stats() To Find Leaders\nWhile using load_player_stats() does not provide the ability to add context to your analysis as we will soon see with load_pbp(), it does provide an easy and efficient way to determine weekly or season-long leaders over many top-level, widely-used NFL statistics. In the below example, we will determine the 2021 leaders in air yards per attempt.\n\n2.1.2.1 An Example: 2021 QB Air Yards per Attempt Leaders\n\ndata <- nflreadr::load_player_stats(2021)\n\nay.per.attempt <- data %>%\n  group_by(player_id) %>%\n  filter(season_type == \"REG\") %>%\n  summarize(player_name = first(player_name),\n            n.attempts = sum(attempts),\n            n.airyards = sum(passing_air_yards),\n            ay.attempt = n.airyards / n.attempts) %>%\n  filter(n.attempts >= 400) %>%\n  select(player_name, ay.attempt) %>%\n  arrange(-ay.attempt)\n\nIn the above example, we are using group_by to combine the desired statistics based on each unique player_id to, again, avoid any issues with player names within the data. After filtering to include just those statistics for the regular season, we first use the summarize function to grab the first player_name associated with the player_id. After, we find two items: (1.) the total number of passing attempts by each QB which is outputted into a new row titled n.attempts and the regular season total of each QB’s air yards, again outputted into a new row titled n.airyards.\nIt is important to note that the final row created with the summarize function is not a statistic included within load_player_stats(). In order to find a QB’s average air yards per attempt, we must use the first two items we’ve created and do some simple division (the created n.airyards divided by n.attempts).\nFinally, to “clear the noise” of those QBs with minimal attempts through the season, we included a filter to include only those passers with at least 400 attempts. After, we arrange the new DF by sorting the QBs in descending order by average air yards per attempt.\nThe end results look like this:\n\ntibble(ay.per.attempt)\n\n# A tibble: 25 x 2\n   player_name   ay.attempt\n   <chr>              <dbl>\n 1 R.Wilson            9.89\n 2 J.Hurts             8.99\n 3 B.Mayfield          8.73\n 4 M.Stafford          8.48\n 5 J.Allen             8.20\n 6 K.Cousins           8.16\n 7 J.Burrow            8.12\n 8 D.Carr              8.12\n 9 T.Brady             8.10\n10 T.Bridgewater       8.04\n# ... with 15 more rows\n# i Use `print(n = ...)` to see more rows\n\n\nRussell Wilson led the NFL in 2021 with 9.89 air yards per attempt."
  },
  {
    "objectID": "01-nfl-analytics-and-r.html#using-load_pbp-to-add-context-to-statistics",
    "href": "01-nfl-analytics-and-r.html#using-load_pbp-to-add-context-to-statistics",
    "title": "\n2  An Introduction to NFL Analytics and the R Programming Language\n",
    "section": "\n2.2 Using load_pbp() to Add Context to Statistics",
    "text": "2.2 Using load_pbp() to Add Context to Statistics\nAs just mentioned above, using the load_pbp() function is preferable when you are looking to add context to a player’s statistics, as the load_player_stats() function is, for all intents and purposes, aggregated statistics that limit your ability to find deeper meaning.\nThe load_pbp() function provides over 350 various metrics, as listed below:\n\npbp.data <- nflreadr::load_pbp(2021)\nls(pbp.data)\n\n  [1] \"aborted_play\"                        \n  [2] \"air_epa\"                             \n  [3] \"air_wpa\"                             \n  [4] \"air_yards\"                           \n  [5] \"assist_tackle\"                       \n  [6] \"assist_tackle_1_player_id\"           \n  [7] \"assist_tackle_1_player_name\"         \n  [8] \"assist_tackle_1_team\"                \n  [9] \"assist_tackle_2_player_id\"           \n [10] \"assist_tackle_2_player_name\"         \n [11] \"assist_tackle_2_team\"                \n [12] \"assist_tackle_3_player_id\"           \n [13] \"assist_tackle_3_player_name\"         \n [14] \"assist_tackle_3_team\"                \n [15] \"assist_tackle_4_player_id\"           \n [16] \"assist_tackle_4_player_name\"         \n [17] \"assist_tackle_4_team\"                \n [18] \"away_coach\"                          \n [19] \"away_score\"                          \n [20] \"away_team\"                           \n [21] \"away_timeouts_remaining\"             \n [22] \"away_wp\"                             \n [23] \"away_wp_post\"                        \n [24] \"blocked_player_id\"                   \n [25] \"blocked_player_name\"                 \n [26] \"comp_air_epa\"                        \n [27] \"comp_air_wpa\"                        \n [28] \"comp_yac_epa\"                        \n [29] \"comp_yac_wpa\"                        \n [30] \"complete_pass\"                       \n [31] \"cp\"                                  \n [32] \"cpoe\"                                \n [33] \"def_wp\"                              \n [34] \"defensive_extra_point_attempt\"       \n [35] \"defensive_extra_point_conv\"          \n [36] \"defensive_two_point_attempt\"         \n [37] \"defensive_two_point_conv\"            \n [38] \"defteam\"                             \n [39] \"defteam_score\"                       \n [40] \"defteam_score_post\"                  \n [41] \"defteam_timeouts_remaining\"          \n [42] \"desc\"                                \n [43] \"div_game\"                            \n [44] \"down\"                                \n [45] \"drive\"                               \n [46] \"drive_end_transition\"                \n [47] \"drive_end_yard_line\"                 \n [48] \"drive_ended_with_score\"              \n [49] \"drive_first_downs\"                   \n [50] \"drive_game_clock_end\"                \n [51] \"drive_game_clock_start\"              \n [52] \"drive_inside20\"                      \n [53] \"drive_play_count\"                    \n [54] \"drive_play_id_ended\"                 \n [55] \"drive_play_id_started\"               \n [56] \"drive_quarter_end\"                   \n [57] \"drive_quarter_start\"                 \n [58] \"drive_real_start_time\"               \n [59] \"drive_start_transition\"              \n [60] \"drive_start_yard_line\"               \n [61] \"drive_time_of_possession\"            \n [62] \"drive_yards_penalized\"               \n [63] \"end_clock_time\"                      \n [64] \"end_yard_line\"                       \n [65] \"ep\"                                  \n [66] \"epa\"                                 \n [67] \"extra_point_attempt\"                 \n [68] \"extra_point_prob\"                    \n [69] \"extra_point_result\"                  \n [70] \"fantasy\"                             \n [71] \"fantasy_id\"                          \n [72] \"fantasy_player_id\"                   \n [73] \"fantasy_player_name\"                 \n [74] \"fg_prob\"                             \n [75] \"field_goal_attempt\"                  \n [76] \"field_goal_result\"                   \n [77] \"first_down\"                          \n [78] \"first_down_pass\"                     \n [79] \"first_down_penalty\"                  \n [80] \"first_down_rush\"                     \n [81] \"fixed_drive\"                         \n [82] \"fixed_drive_result\"                  \n [83] \"forced_fumble_player_1_player_id\"    \n [84] \"forced_fumble_player_1_player_name\"  \n [85] \"forced_fumble_player_1_team\"         \n [86] \"forced_fumble_player_2_player_id\"    \n [87] \"forced_fumble_player_2_player_name\"  \n [88] \"forced_fumble_player_2_team\"         \n [89] \"fourth_down_converted\"               \n [90] \"fourth_down_failed\"                  \n [91] \"fumble\"                              \n [92] \"fumble_forced\"                       \n [93] \"fumble_lost\"                         \n [94] \"fumble_not_forced\"                   \n [95] \"fumble_out_of_bounds\"                \n [96] \"fumble_recovery_1_player_id\"         \n [97] \"fumble_recovery_1_player_name\"       \n [98] \"fumble_recovery_1_team\"              \n [99] \"fumble_recovery_1_yards\"             \n[100] \"fumble_recovery_2_player_id\"         \n[101] \"fumble_recovery_2_player_name\"       \n[102] \"fumble_recovery_2_team\"              \n[103] \"fumble_recovery_2_yards\"             \n[104] \"fumbled_1_player_id\"                 \n[105] \"fumbled_1_player_name\"               \n[106] \"fumbled_1_team\"                      \n[107] \"fumbled_2_player_id\"                 \n[108] \"fumbled_2_player_name\"               \n[109] \"fumbled_2_team\"                      \n[110] \"game_date\"                           \n[111] \"game_half\"                           \n[112] \"game_id\"                             \n[113] \"game_seconds_remaining\"              \n[114] \"game_stadium\"                        \n[115] \"goal_to_go\"                          \n[116] \"half_sack_1_player_id\"               \n[117] \"half_sack_1_player_name\"             \n[118] \"half_sack_2_player_id\"               \n[119] \"half_sack_2_player_name\"             \n[120] \"half_seconds_remaining\"              \n[121] \"home_coach\"                          \n[122] \"home_opening_kickoff\"                \n[123] \"home_score\"                          \n[124] \"home_team\"                           \n[125] \"home_timeouts_remaining\"             \n[126] \"home_wp\"                             \n[127] \"home_wp_post\"                        \n[128] \"id\"                                  \n[129] \"incomplete_pass\"                     \n[130] \"interception\"                        \n[131] \"interception_player_id\"              \n[132] \"interception_player_name\"            \n[133] \"jersey_number\"                       \n[134] \"kick_distance\"                       \n[135] \"kicker_player_id\"                    \n[136] \"kicker_player_name\"                  \n[137] \"kickoff_attempt\"                     \n[138] \"kickoff_downed\"                      \n[139] \"kickoff_fair_catch\"                  \n[140] \"kickoff_in_endzone\"                  \n[141] \"kickoff_inside_twenty\"               \n[142] \"kickoff_out_of_bounds\"               \n[143] \"kickoff_returner_player_id\"          \n[144] \"kickoff_returner_player_name\"        \n[145] \"lateral_interception_player_id\"      \n[146] \"lateral_interception_player_name\"    \n[147] \"lateral_kickoff_returner_player_id\"  \n[148] \"lateral_kickoff_returner_player_name\"\n[149] \"lateral_punt_returner_player_id\"     \n[150] \"lateral_punt_returner_player_name\"   \n[151] \"lateral_receiver_player_id\"          \n[152] \"lateral_receiver_player_name\"        \n[153] \"lateral_receiving_yards\"             \n[154] \"lateral_reception\"                   \n[155] \"lateral_recovery\"                    \n[156] \"lateral_return\"                      \n[157] \"lateral_rush\"                        \n[158] \"lateral_rusher_player_id\"            \n[159] \"lateral_rusher_player_name\"          \n[160] \"lateral_rushing_yards\"               \n[161] \"lateral_sack_player_id\"              \n[162] \"lateral_sack_player_name\"            \n[163] \"location\"                            \n[164] \"name\"                                \n[165] \"nfl_api_id\"                          \n[166] \"no_huddle\"                           \n[167] \"no_score_prob\"                       \n[168] \"old_game_id\"                         \n[169] \"opp_fg_prob\"                         \n[170] \"opp_safety_prob\"                     \n[171] \"opp_td_prob\"                         \n[172] \"order_sequence\"                      \n[173] \"out_of_bounds\"                       \n[174] \"own_kickoff_recovery\"                \n[175] \"own_kickoff_recovery_player_id\"      \n[176] \"own_kickoff_recovery_player_name\"    \n[177] \"own_kickoff_recovery_td\"             \n[178] \"pass\"                                \n[179] \"pass_attempt\"                        \n[180] \"pass_defense_1_player_id\"            \n[181] \"pass_defense_1_player_name\"          \n[182] \"pass_defense_2_player_id\"            \n[183] \"pass_defense_2_player_name\"          \n[184] \"pass_length\"                         \n[185] \"pass_location\"                       \n[186] \"pass_oe\"                             \n[187] \"pass_touchdown\"                      \n[188] \"passer\"                              \n[189] \"passer_id\"                           \n[190] \"passer_jersey_number\"                \n[191] \"passer_player_id\"                    \n[192] \"passer_player_name\"                  \n[193] \"passing_yards\"                       \n[194] \"penalty\"                             \n[195] \"penalty_player_id\"                   \n[196] \"penalty_player_name\"                 \n[197] \"penalty_team\"                        \n[198] \"penalty_type\"                        \n[199] \"penalty_yards\"                       \n[200] \"play\"                                \n[201] \"play_clock\"                          \n[202] \"play_deleted\"                        \n[203] \"play_id\"                             \n[204] \"play_type\"                           \n[205] \"play_type_nfl\"                       \n[206] \"posteam\"                             \n[207] \"posteam_score\"                       \n[208] \"posteam_score_post\"                  \n[209] \"posteam_timeouts_remaining\"          \n[210] \"posteam_type\"                        \n[211] \"punt_attempt\"                        \n[212] \"punt_blocked\"                        \n[213] \"punt_downed\"                         \n[214] \"punt_fair_catch\"                     \n[215] \"punt_in_endzone\"                     \n[216] \"punt_inside_twenty\"                  \n[217] \"punt_out_of_bounds\"                  \n[218] \"punt_returner_player_id\"             \n[219] \"punt_returner_player_name\"           \n[220] \"punter_player_id\"                    \n[221] \"punter_player_name\"                  \n[222] \"qb_dropback\"                         \n[223] \"qb_epa\"                              \n[224] \"qb_hit\"                              \n[225] \"qb_hit_1_player_id\"                  \n[226] \"qb_hit_1_player_name\"                \n[227] \"qb_hit_2_player_id\"                  \n[228] \"qb_hit_2_player_name\"                \n[229] \"qb_kneel\"                            \n[230] \"qb_scramble\"                         \n[231] \"qb_spike\"                            \n[232] \"qtr\"                                 \n[233] \"quarter_end\"                         \n[234] \"quarter_seconds_remaining\"           \n[235] \"receiver\"                            \n[236] \"receiver_id\"                         \n[237] \"receiver_jersey_number\"              \n[238] \"receiver_player_id\"                  \n[239] \"receiver_player_name\"                \n[240] \"receiving_yards\"                     \n[241] \"replay_or_challenge\"                 \n[242] \"replay_or_challenge_result\"          \n[243] \"result\"                              \n[244] \"return_team\"                         \n[245] \"return_touchdown\"                    \n[246] \"return_yards\"                        \n[247] \"roof\"                                \n[248] \"run_gap\"                             \n[249] \"run_location\"                        \n[250] \"rush\"                                \n[251] \"rush_attempt\"                        \n[252] \"rush_touchdown\"                      \n[253] \"rusher\"                              \n[254] \"rusher_id\"                           \n[255] \"rusher_jersey_number\"                \n[256] \"rusher_player_id\"                    \n[257] \"rusher_player_name\"                  \n[258] \"rushing_yards\"                       \n[259] \"sack\"                                \n[260] \"sack_player_id\"                      \n[261] \"sack_player_name\"                    \n[262] \"safety\"                              \n[263] \"safety_player_id\"                    \n[264] \"safety_player_name\"                  \n[265] \"safety_prob\"                         \n[266] \"score_differential\"                  \n[267] \"score_differential_post\"             \n[268] \"season\"                              \n[269] \"season_type\"                         \n[270] \"series\"                              \n[271] \"series_result\"                       \n[272] \"series_success\"                      \n[273] \"shotgun\"                             \n[274] \"side_of_field\"                       \n[275] \"solo_tackle\"                         \n[276] \"solo_tackle_1_player_id\"             \n[277] \"solo_tackle_1_player_name\"           \n[278] \"solo_tackle_1_team\"                  \n[279] \"solo_tackle_2_player_id\"             \n[280] \"solo_tackle_2_player_name\"           \n[281] \"solo_tackle_2_team\"                  \n[282] \"sp\"                                  \n[283] \"special\"                             \n[284] \"special_teams_play\"                  \n[285] \"spread_line\"                         \n[286] \"st_play_type\"                        \n[287] \"stadium\"                             \n[288] \"stadium_id\"                          \n[289] \"start_time\"                          \n[290] \"success\"                             \n[291] \"surface\"                             \n[292] \"tackle_for_loss_1_player_id\"         \n[293] \"tackle_for_loss_1_player_name\"       \n[294] \"tackle_for_loss_2_player_id\"         \n[295] \"tackle_for_loss_2_player_name\"       \n[296] \"tackle_with_assist\"                  \n[297] \"tackle_with_assist_1_player_id\"      \n[298] \"tackle_with_assist_1_player_name\"    \n[299] \"tackle_with_assist_1_team\"           \n[300] \"tackle_with_assist_2_player_id\"      \n[301] \"tackle_with_assist_2_player_name\"    \n[302] \"tackle_with_assist_2_team\"           \n[303] \"tackled_for_loss\"                    \n[304] \"td_player_id\"                        \n[305] \"td_player_name\"                      \n[306] \"td_prob\"                             \n[307] \"td_team\"                             \n[308] \"temp\"                                \n[309] \"third_down_converted\"                \n[310] \"third_down_failed\"                   \n[311] \"time\"                                \n[312] \"time_of_day\"                         \n[313] \"timeout\"                             \n[314] \"timeout_team\"                        \n[315] \"total\"                               \n[316] \"total_away_comp_air_epa\"             \n[317] \"total_away_comp_air_wpa\"             \n[318] \"total_away_comp_yac_epa\"             \n[319] \"total_away_comp_yac_wpa\"             \n[320] \"total_away_epa\"                      \n[321] \"total_away_pass_epa\"                 \n[322] \"total_away_pass_wpa\"                 \n[323] \"total_away_raw_air_epa\"              \n[324] \"total_away_raw_air_wpa\"              \n[325] \"total_away_raw_yac_epa\"              \n[326] \"total_away_raw_yac_wpa\"              \n[327] \"total_away_rush_epa\"                 \n[328] \"total_away_rush_wpa\"                 \n[329] \"total_away_score\"                    \n[330] \"total_home_comp_air_epa\"             \n[331] \"total_home_comp_air_wpa\"             \n[332] \"total_home_comp_yac_epa\"             \n[333] \"total_home_comp_yac_wpa\"             \n[334] \"total_home_epa\"                      \n[335] \"total_home_pass_epa\"                 \n[336] \"total_home_pass_wpa\"                 \n[337] \"total_home_raw_air_epa\"              \n[338] \"total_home_raw_air_wpa\"              \n[339] \"total_home_raw_yac_epa\"              \n[340] \"total_home_raw_yac_wpa\"              \n[341] \"total_home_rush_epa\"                 \n[342] \"total_home_rush_wpa\"                 \n[343] \"total_home_score\"                    \n[344] \"total_line\"                          \n[345] \"touchback\"                           \n[346] \"touchdown\"                           \n[347] \"two_point_attempt\"                   \n[348] \"two_point_conv_result\"               \n[349] \"two_point_conversion_prob\"           \n[350] \"vegas_home_wp\"                       \n[351] \"vegas_home_wpa\"                      \n[352] \"vegas_wp\"                            \n[353] \"vegas_wpa\"                           \n[354] \"weather\"                             \n[355] \"week\"                                \n[356] \"wind\"                                \n[357] \"wp\"                                  \n[358] \"wpa\"                                 \n[359] \"xpass\"                               \n[360] \"xyac_epa\"                            \n[361] \"xyac_fd\"                             \n[362] \"xyac_mean_yardage\"                   \n[363] \"xyac_median_yardage\"                 \n[364] \"xyac_success\"                        \n[365] \"yac_epa\"                             \n[366] \"yac_wpa\"                             \n[367] \"yardline_100\"                        \n[368] \"yards_after_catch\"                   \n[369] \"yards_gained\"                        \n[370] \"ydsnet\"                              \n[371] \"ydstogo\"                             \n[372] \"yrdln\"                               \n\n\nA bit overwhelming, right?\nLuckily, the nflfastR website includes a searchable directory of all the variables with a brief description of what each one means. You can visit that here: nflfastR Field Descriptions.\nAs seen above, we can use the load_player_stats() function to determine a QB’s average yards per attempt over the course of a season. But, what if we wanted to add context to that? For example, how do we explore a QB’s air yards in game-specific situations?\nTo showcase using load_pbp() to add context to your analysis, let’s explore QB performance via air yards on 3rd down.\n\n2.2.1 An Example: QB Aggressiveness on 3rd Down\nSticking with the air yards example from above, let’s examine a metric I created using load_pbp() that I coined QB 3rd Down Aggressiveness. The metric is designed to determine which QBs in the NFL are most aggressive in 3rd down situations by gauging how often they throw the ball to, or pass, the first down line. It is an interesting metric to explore as, just like many metrics in the NFL, not all air yards are created equal. For example, eight air yards on 1st and 10 are less valuable than the same eight air yards on 3rd and 5.\nFirst, let’s highlight the code used to create the results for this metric and then break it down line-by-line.\n\ndata <- nflreadr::load_pbp(2021)\n\naggressiveness <- data %>%\n  group_by(passer_id) %>%\n  filter(down == 3, play_type == \"pass\", ydstogo >= 5, ydstogo <= 10) %>%\n  summarize(player_name = first(passer),\n            team = first(posteam),\n            total = n(),\n            aggressive = sum(air_yards >= ydstogo, na.rm = TRUE),\n            percentage = aggressive / total) %>%\n  filter(total >= 50) %>%\n  arrange(-percentage)\n\ntibble(aggressiveness)\n\n# A tibble: 30 x 6\n   passer_id  player_name  team  total aggressive percentage\n   <chr>      <chr>        <chr> <int>      <int>      <dbl>\n 1 00-0033077 D.Prescott   DAL      84         53      0.631\n 2 00-0035228 K.Murray     ARI      60         37      0.617\n 3 00-0036389 J.Hurts      PHI      65         40      0.615\n 4 00-0033873 P.Mahomes    KC       93         56      0.602\n 5 00-0034855 B.Mayfield   CLE      59         35      0.593\n 6 00-0036971 T.Lawrence   JAX      78         46      0.590\n 7 00-0036355 J.Herbert    LAC      87         51      0.586\n 8 00-0035710 D.Jones      NYG      60         35      0.583\n 9 00-0036212 T.Tagovailoa MIA      60         35      0.583\n10 00-0026498 M.Stafford   LA       95         54      0.568\n# ... with 20 more rows\n# i Use `print(n = ...)` to see more rows\n\n\nAs you can see in the tibble() output of the results, Dak Prescott was the most aggressive quarterback in 3rd down passing situations in the 2021 season, passing to, our beyond, the line of gain just over 63% of the time.\nAfter creating a new dataframe called aggressiveness from the 2021 play-by-play we originally collected using data <- nflreadr::load_pbp(2021), we use group_by to ensure that the data is being collected per individual quarterback via passer_id.\nAfter using the group_by function to lump data with each individual QB, we then use filter() function. Of course, we only want those play_types that are “pass” on 3rd downs. However, in the above code, we are filtering for just those 3rd down situations where the yards to go are between five and ten yards.\nDoing so was a personal decision on my end when creating the metric, as there are certainly arguments to be made regarding how to “capture” scenarios in the data that require “aggressiveness.” My logic? If there were less than five yards to go on 3rd down, the opposing defense would not be able to “sell out” to the pass as it would not be out of the question for an offense to attempt to gain the first down on the ground. Conversely, anything over ten yards likely results in the defense selling out to the pass, thus leaving an imprint on the aggressiveness output of the quarterbacks.\nFor the sake of curiosity, we can edit the above code to include all passing attempts on 3rd down with under 10 yards to go for the first down:\n\naggressiveness.under.10 <- data %>%\n  group_by(passer_id) %>%\n  filter(down == 3, play_type == \"pass\", ydstogo <= 10) %>%\n  summarize(player_name = first(passer),\n            team = first(posteam),\n            total = n(),\n            aggressive = sum(air_yards >= ydstogo, na.rm = TRUE),\n            percentage = aggressive / total) %>%\n  filter(total >= 50) %>%\n  arrange(desc(percentage))\n\ntibble(aggressiveness.under.10)\n\n# A tibble: 33 x 6\n   passer_id  player_name  team  total aggressive percentage\n   <chr>      <chr>        <chr> <int>      <int>      <dbl>\n 1 00-0035228 K.Murray     ARI      98         67      0.684\n 2 00-0036389 J.Hurts      PHI     107         73      0.682\n 3 00-0036971 T.Lawrence   JAX     131         88      0.672\n 4 00-0033077 D.Prescott   DAL     136         89      0.654\n 5 00-0034857 J.Allen      BUF     138         88      0.638\n 6 00-0036355 J.Herbert    LAC     148         94      0.635\n 7 00-0036212 T.Tagovailoa MIA      93         59      0.634\n 8 00-0026498 M.Stafford   LA      172        109      0.634\n 9 00-0023459 A.Rodgers    GB      128         80      0.625\n10 00-0035710 D.Jones      NYG      85         53      0.624\n# ... with 23 more rows\n# i Use `print(n = ...)` to see more rows\n\n\nThe results are quite different from the first running of this metric, as Dak Prescott is now the 4th most aggressive QB, while Kyler Murray moves to the top by approaching a nearly 70% aggressiveness rate on 3rd down. This small change highlights an important element about analytics: much of the work is the result of the coder (ie., you) being able to justify your decision-making process when developing the filters for each metric you create.\nIn this case, I stand by my argument that including just those pass attempts on 3rd down with between 5 and 10 yards to go is a more accurate assessment of aggressiveness as, for example, 3rd down with 8 yards to go is an obvious passing situation in most cases.\nThat begs the question, though: in which cases is 3rd down with 8 yards to go not an obvious passing situation? An example of this falls under the guise of “garbage time.”\n\n2.2.1.1 QB Aggressiveness: Filtering for “Garbage Time?”\nIn our initial running of the QB Aggressiveness metric, Josh Allen is the 15th most aggressive QB in the NFL on 3rd down with between 5 and 10 yards to go. But how much does the success of the Buffalo Bills play into that 15th place ranking?\nThe Bills, at the conclusion of the 2021 season, had the largest positive point differential in the league at 194 (the Bills scored 483 points, while allowing just 289). Perhaps Allen’s numbers are skewed because the Bills were so often playing with the lead late into the game?\nTo account for this, we can add information into the filter() function to attempt to remove what are referenced to in the analytics community as “garbage time stats.”\nLet’s add the “garbage time” filter to the code we’ve already prepared:\n\naggressiveness.garbage <- data %>%\n  group_by(passer_id) %>%\n  filter(down == 3, play_type == \"pass\", ydstogo >= 5, ydstogo <= 10,\n         wp > .05, wp < .95, half_seconds_remaining > 120) %>%\n  summarize(player_name = first(passer),\n            team = first(posteam),\n            total = n(),\n            aggressive = sum(air_yards >= ydstogo, na.rm = TRUE),\n            percentage = aggressive / total) %>%\n  filter(total >= 50) %>%\n  arrange(desc(percentage))\n\ntibble(aggressiveness.garbage)\n\n# A tibble: 26 x 6\n   passer_id  player_name team  total aggressive percentage\n   <chr>      <chr>       <chr> <int>      <int>      <dbl>\n 1 00-0033077 D.Prescott  DAL      61         40      0.656\n 2 00-0036971 T.Lawrence  JAX      51         33      0.647\n 3 00-0035228 K.Murray    ARI      51         31      0.608\n 4 00-0026498 M.Stafford  LA       79         48      0.608\n 5 00-0033873 P.Mahomes   KC       68         41      0.603\n 6 00-0035710 D.Jones     NYG      50         30      0.6  \n 7 00-0036355 J.Herbert   LAC      67         38      0.567\n 8 00-0036972 M.Jones     NE       57         31      0.544\n 9 00-0034857 J.Allen     BUF      59         32      0.542\n10 00-0029263 R.Wilson    SEA      56         30      0.536\n# ... with 16 more rows\n# i Use `print(n = ...)` to see more rows\n\n\nWe are now using the same code, but have included three new items to the filter(). First, we are stipulating that, aside from the down and distance inclusion, we only want those plays that occurred when the offense’s win probability was between 5% and 95%, as well as ensuring that the plays did not happen after the two-minute warning of either half.\nThe decision on range of the win probability numbers is, again, a personal preference. When nflfastR was first released, analyst often used a 20-80% range for win probability. However, Sebastian Carl - one of the creators of the nflverse explained in the package’s Discord:\n\nSebastian Carl: “I am generally very conservative with filtering plays using wp. Especially the vegas wp model can reach >85% probs early in the game because it incorporates market lines. I never understood the 20% <= wp <= 80%”garbage time” filter. This is removing a ton of plays. My general advice is a lower boundary of something around 5% (i.e., 5% <= wp <= 95%).\n\nBen Baldwin followed up on Carl’s thoughts:\n\nBen Baldwin: “agree with this. 20-80% should only be used as a filter for looking at how run-heavy a team is (because outside of this range is when teams change behavior a lot). and possibly how teams behave on 4th downs. but not for team or player performance.”\n\nBased on that advice, I typically stick to the 5-95% range when filtering for win probability using play-by-play data. And, in this case, it did have an impact.\nAs mentioned, prior to filtering for garbage time, Allen was the 15th most aggressive QB in the league at nearly 52%. However, once filtering for garbage time, Allen rose to 9th most aggressive QB, with a slight increase of percentage to 54%.\nWhat is interesting about the above example, though, is Dak Prescott and the Cowboys. Dallas maintained the second largest point differential in the league (530 points for and 358 points against, for a 172 point difference). Without the garbage time filter, Prescott was tops in the NFL with an aggressiveness rating of 63%.\nOnce adjusted for garbage time? Prescott remained atop the NFL with an aggressiveness rating of 65.5%.\nAllen’s increase in the standings, and Prescott remaining best in the league, in this specific metric, is a possible indicator that the inclusion of the “garbage time” filters provides a slightly more accurate result.\n\n2.2.2 The Inclusion of Contextual Statistics\nAs seen in the above example regarding QB aggressiveness on 3rd down, the using of the load_pbp() function provides the ability to create situation specific metrics that would otherwise be lost in aggregated weekly statistics."
  },
  {
    "objectID": "01-nfl-analytics-and-r.html#retrieving-working-with-data-for-multiple-seasons",
    "href": "01-nfl-analytics-and-r.html#retrieving-working-with-data-for-multiple-seasons",
    "title": "\n2  An Introduction to NFL Analytics and the R Programming Language\n",
    "section": "\n2.3 Retrieving & Working With Data for Multiple Seasons",
    "text": "2.3 Retrieving & Working With Data for Multiple Seasons\nIn the case of both load_pbp() and load_player_stats(), it is possible to load data over multiple seasons.\nIn our above example calculating average air yard per attempt, it is important to note that Russell Wilson’s league-leading average of 9.89 air yards per attempt is calculated using all passing attempts, meaning pass attempts that were both complete and incomplete.\nIn our first example of working with data across multiple seasons, let’s examine average air yards for only completed passes. To begin, we will retrieve the play-by-play data for the last five seasons:\n\nay.five.years <- nflreadr::load_pbp(2017:2021)\n\nTo retrieve multiple seasons of data, a colon : is placed between the years that you want. When you run the code, nflreadr will output the data to include the play-by-play data starting with the oldest season (in this case, the 2017 NFL season):\n\ntibble(ay.five.years)\n\n# A tibble: 243,131 x 372\n   play_id game_id old_g~1 home_~2 away_~3 seaso~4  week posteam poste~5 defteam\n     <dbl> <chr>   <chr>   <chr>   <chr>   <chr>   <int> <chr>   <chr>   <chr>  \n 1       1 2017_0~ 201709~ DET     ARI     REG         1 <NA>    <NA>    <NA>   \n 2      37 2017_0~ 201709~ DET     ARI     REG         1 ARI     away    DET    \n 3      73 2017_0~ 201709~ DET     ARI     REG         1 ARI     away    DET    \n 4      97 2017_0~ 201709~ DET     ARI     REG         1 ARI     away    DET    \n 5     118 2017_0~ 201709~ DET     ARI     REG         1 ARI     away    DET    \n 6     153 2017_0~ 201709~ DET     ARI     REG         1 ARI     away    DET    \n 7     174 2017_0~ 201709~ DET     ARI     REG         1 ARI     away    DET    \n 8     207 2017_0~ 201709~ DET     ARI     REG         1 ARI     away    DET    \n 9     233 2017_0~ 201709~ DET     ARI     REG         1 DET     home    ARI    \n10     254 2017_0~ 201709~ DET     ARI     REG         1 DET     home    ARI    \n# ... with 243,121 more rows, 362 more variables: side_of_field <chr>,\n#   yardline_100 <dbl>, game_date <chr>, quarter_seconds_remaining <dbl>,\n#   half_seconds_remaining <dbl>, game_seconds_remaining <dbl>,\n#   game_half <chr>, quarter_end <dbl>, drive <dbl>, sp <dbl>, qtr <dbl>,\n#   down <dbl>, goal_to_go <dbl>, time <chr>, yrdln <chr>, ydstogo <dbl>,\n#   ydsnet <dbl>, desc <chr>, play_type <chr>, yards_gained <dbl>,\n#   shotgun <dbl>, no_huddle <dbl>, qb_dropback <dbl>, qb_kneel <dbl>, ...\n# i Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\n\nOnce you have the data collected, we can run code that looks quite similar to our code above that explored 2021’s air yards per attempt leaders using load_player_stats(). In this case, however, we are including an additional filter to gather those passing attempts that results only in complete passes:\n\naverage.airyards <- ay.five.years %>%\n  group_by(passer_id) %>%\n  filter(season_type == \"REG\" & complete_pass == 1) %>%\n  summarize(player = first(passer_player_name),\n            completions = sum(complete_pass),\n            air.yards = sum(air_yards),\n            average = air.yards / completions) %>%\n  filter(completions >= 1000) %>%\n  arrange(-average)\n\ntibble(average.airyards)\n\n# A tibble: 22 x 5\n   passer_id  player      completions air.yards average\n   <chr>      <chr>             <dbl>     <dbl>   <dbl>\n 1 00-0031503 J.Winston          1008      8174    8.11\n 2 00-0033537 D.Watson           1186      8461    7.13\n 3 00-0029263 R.Wilson           1603     10939    6.82\n 4 00-0026143 M.Ryan             1954     13051    6.68\n 5 00-0034855 B.Mayfield         1185      7858    6.63\n 6 00-0034857 J.Allen            1245      8221    6.60\n 7 00-0033077 D.Prescott         1613     10449    6.48\n 8 00-0026498 M.Stafford         1668     10804    6.48\n 9 00-0029701 R.Tannehill        1049      6680    6.37\n10 00-0032950 C.Wentz            1505      9491    6.31\n# ... with 12 more rows\n# i Use `print(n = ...)` to see more rows\n\n\nOf those QBs with at least 1,000 complete passes since the 2017 season, Jameis Winston has the highest average air yards per complete pass at 8.11."
  },
  {
    "objectID": "01-nfl-analytics-and-r.html#exercises",
    "href": "01-nfl-analytics-and-r.html#exercises",
    "title": "\n2  An Introduction to NFL Analytics and the R Programming Language\n",
    "section": "\n2.4 Exercises",
    "text": "2.4 Exercises"
  },
  {
    "objectID": "02-nfl-analytics-tidyverse.html#installing-necessary-packages",
    "href": "02-nfl-analytics-tidyverse.html#installing-necessary-packages",
    "title": "3  Wrangling NFL Data in the tidyverse",
    "section": "3.2 Installing Necessary Packages",
    "text": "3.2 Installing Necessary Packages"
  },
  {
    "objectID": "02-nfl-analytics-tidyverse.html#the-tidyverse-language",
    "href": "02-nfl-analytics-tidyverse.html#the-tidyverse-language",
    "title": "3  Wrangling NFL Data in the tidyverse",
    "section": "3.3 The tidyverse Language",
    "text": "3.3 The tidyverse Language"
  },
  {
    "objectID": "04-nfl-analytics-visualization.html",
    "href": "04-nfl-analytics-visualization.html",
    "title": "\n5  Data Visulization with NFL Analytics\n",
    "section": "",
    "text": "An intro regarding the importance of data viz is going to go here.\nJim Stikeleather, writing for the Harvard Business Review, outlined three key elements that make a successful data visualization (albeit, leaving us to decide the definition of what a “successful” data visualization is). Despite that philosophical gap, the three elements provided by Stikeleather are succinct enough to allow us to build a framework in this chapter for how to successfully craft an NFL analytics data visualization. In his piece, Stikeleather outlines the following three characteristics of a successful data visualization: it understands the audience, it sets up a clear framework, and it tells a story (Stikeleather 2013).\nTo illustrate the importane of these three elements, let’s take a look at example visualizations using NFL data to furhter contextulize each one."
  },
  {
    "objectID": "04-nfl-analytics-visualization.html#data-viz-must-understand-the-audience",
    "href": "04-nfl-analytics-visualization.html#data-viz-must-understand-the-audience",
    "title": "\n5  Data Visulization with NFL Analytics\n",
    "section": "\n5.1 Data Viz Must Understand the Audience",
    "text": "5.1 Data Viz Must Understand the Audience\nAs explained by Stikeleather, the core purpose of a data visualization is to take “great quantities of information” and then convey that information in such a way that it is “easily ssimilated by the consumers of the information.” In other words, the process of data visualization should allow for a great quantity of data to be distilled into an easily consumable (and understandable!) format.\nSpeaking specifically to NFL analytics, when doing visualizations we must be concious about whether or not the intended audience will understand the terminology and concepts we use in the plot. For example, most all NFL fans understand the “non-advanced” statistics in the sport. But, when plots start using metrics such as EPA or completion percentage over expected, for example, the audience looking at the plot may very well have little understanding of what is being conveyed.\nBecause of this, any data viz I create never shys away from including “directables” within the plot. These “directables” may be arrows that indicate which trend on the plot are “good” or they can be text within a scatterplot that explains what each quadrant means. Or, for example, I sometimes include a textual explanation of the “equation” used to develop a metric as seen below:\n\n\n\n\n\nThe above plot explores which QBs, from the 2020 season, were most aggressive on 3rd down with between 5 to 10 yards to go. Since “aggressiveness” is not a typical, day-to-day metric discussed by NFL fans, I included a “directable” within the subtitle of the plot that explained that the plot, first, was examining just 3rd down pass attempts within a specific yard range. And, second, I made the decision to include how “aggressiveness” was calculated by including the simple equation within the subtitle as well. Doing so allows even the most casual of NFL fans to easily understand what the plot is showing - in this case, that Joe Burrow’s 3rd down pass attempts with between 5 to 10 yards to go made it to the line of gain, or more, on 68% of his attempts. On the other hand, Drew Lock and Drew Brees were the least aggessive QBs in the line based on the same metric.\nAs another example, below is what I deemed my “Uncle Rico Metric” (because who does not like a good Napolean Dynamite reference?):"
  },
  {
    "objectID": "04-nfl-analytics-visualization.html#setting-up-for-data-viz",
    "href": "04-nfl-analytics-visualization.html#setting-up-for-data-viz",
    "title": "\n5  Data Visulization with NFL Analytics\n",
    "section": "\n5.2 Setting Up for Data Viz",
    "text": "5.2 Setting Up for Data Viz\nWhile most of your journey through NFL analytics in this book required you to use the tidyverse and a handful of other packages, the process of creating compelling and meaningful data visulizations will require you to utilize multitudes of other packages. Of course, the most important is ggplot2 which is already installed via the tidyverse. However, in order to recreate the visulizations included in this chapter, it is required that you install other R packages. To install the necessary packages, you can run the following code in RStudio:\n\n\n\n\nStikeleather, Jim. 2013. “The Three Elements of Successful Data Visualizations.” https://hbr.org/2013/04/the-three-elements-of-successf."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Awbrey, Jake. 2020. “The Future of NFL Analytics.” https://www.samford.edu/sports-analytics/fans/2020/The-Future-of-NFL-Data-Analytics.\n\n\nBechtold, Taylor. 2021. “How the Analytics Movement Has Changed\nthe NFL and Where It Has Fallen Short.” https://theanalyst.com/na/2021/04/evolution-of-the-analytics-movement-in-the-nfl/.\n\n\n“Big Data Bowl: The Annual Analytics Contest Explores Statistical\nInnovations in Football.” n.d. https://operations.nfl.com/gameday/analytics/big-data-bowl/.\n\n\nBushnell, Henry. 2021. “NFL Teams Are Taking 4th-down Risks More\nThan Ever - but Still Not Often Enough.” https://sports.yahoo.com/nfl-teams-are-taking-4th-down-risks-more-than-ever-but-still-not-often-enough-163650973.html.\n\n\nCarl, Sebastian. 2022. “nflplotR.” https://nflplotr.nflverse.com/.\n\n\nFortier, Sam. 2020. “The NFL’s Analytics Movement Has Finally\nReached the Sport’s Mainstream.” https://www.washingtonpost.com/sports/2020/01/16/nfls-analytics-movement-has-finally-reached-sports-mainstream/.\n\n\nHeifetz, Danney. 2019. “We Salute You, Founding Father of the\nNFL’s Analytics Movement.” https://www.theringer.com/nfl-preview/2019/8/15/20806241/nfl-analytics-pro-football-focus.\n\n\nKozora, Alex. 2015. “Tomlin Prefers \"Feel over Analytics\".”\nhttp://steelersdepot.com/2015/09/tomlin-prefers-feel-over-analytics/.\n\n\nRosenthal, Gregg. 2018. “Super Bowl LII: How the 2017 Philadelphia\nEagles Were Built.” https://www.nfl.com/news/super-bowl-lii-how-the-2017-philadelphia-eagles-were-built-0ap3000000912753.\n\n\nSilge, Julia. n.d. “Tidymodels.” https://tidymodels.org.\n\n\nStikeleather, Jim. 2013. “The Three Elements of Successful Data\nVisualizations.” https://hbr.org/2013/04/the-three-elements-of-successf."
  },
  {
    "objectID": "a1-nfl-analytics-dictionary.html",
    "href": "a1-nfl-analytics-dictionary.html",
    "title": "Appendix A — NFL Analytics Reference Guide",
    "section": "",
    "text": "This is a work in progress. Reviewers given access to the earliest version of this book suggest a “Football 101” section to bring people up to speed on analytics and definitions of those analytics. This is going to serve as that reference point, and also include a “quick reference guide” on how to find/calculate the metrics within the nflverse. Before are just a couple examples of how I see this section being displayed."
  },
  {
    "objectID": "a1-nfl-analytics-dictionary.html#air-yards",
    "href": "a1-nfl-analytics-dictionary.html#air-yards",
    "title": "Appendix A — NFL Analytics Reference Guide",
    "section": "\nA.1 Air Yards",
    "text": "A.1 Air Yards\nAir yards is the measure that the ball travels through the air, from the line of scrimmage, to the exact point where the wide receivers catches, or does not catch, the football. It does not take into consideration the amount of yardage gained after the catch by the wide receiver (which would be yards after catch).\nFor an example, please see the below illustration. In it, the line of scrimmag is at the 20-yardline. The QB completes a pass that is caught at midfield (the 50-yardline). After catching the football, the wide receiver is able to advance the ball down to the opposing 30-yardline before getting tackled. First and foremost, the quarterback is credited with a total of 50 passing yards on the play, while the wide receiver is credited with the same.\nHowever, because air yards is a better metric to explore a QB’s true impact on a play, he is credited with 30 air yards while the wide receiver is credited with 20 yards after catch.\nIn the end, quarterbacks with higher air yards per attempt are generally assumed to be throwing the ball deeper downfield than QBs with lower air yards per attempt.\n\n\n\n\n\n\n\nThere are multiple ways to collect data pertaining to air yards. However, the most straightforward way is to use load_player_stats:\n\ndata <- nflreadr::load_player_stats(2021)\n\nair.yards <- data %>%\n  filter(season_type == \"REG\") %>%\n  group_by(player_id) %>%\n  summarize(\n    attempts = sum(attempts),\n    name = first(player_name),\n    air.yards = sum(passing_air_yards),\n    avg.ay = mean(passing_air_yards)) %>%\n  filter(attempts >= 100) %>%\n  select(name, air.yards, avg.ay) %>%\n  arrange(-air.yards)\n\ntibble(air.yards)\n\n# A tibble: 42 x 3\n   name       air.yards avg.ay\n   <chr>          <dbl>  <dbl>\n 1 T.Brady         5821   342.\n 2 J.Allen         5295   311.\n 3 M.Stafford      5094   300.\n 4 D.Carr          5084   299.\n 5 J.Herbert       5069   298.\n 6 P.Mahomes       4825   284.\n 7 T.Lawrence      4732   278.\n 8 D.Prescott      4612   288.\n 9 K.Cousins       4575   286.\n10 J.Burrow        4225   264.\n# ... with 32 more rows\n# i Use `print(n = ...)` to see more rows\n\n\nIn the above example, we can see that Tom Brady led the NFL during the 2021 regular season with a comined total of 5,821 air yards which works out to an average of 342 air yards per game."
  },
  {
    "objectID": "a1-nfl-analytics-dictionary.html#average-depth-of-target",
    "href": "a1-nfl-analytics-dictionary.html#average-depth-of-target",
    "title": "Appendix A — NFL Analytics Reference Guide",
    "section": "\nA.2 Average Depth of Target",
    "text": "A.2 Average Depth of Target\nAs mentioned above, a QB’s air yards per attempt can highlight whether or not he is attempting to push the ball deeper down field than his counterparts. The official name of this is Average Depth of Target (or ADOT). We can easily generate this statistic using the load_player_stats function within nflreader:\n\ndata <- nflreadr::load_player_stats(2021)\n\nadot <- data %>%\n  filter(season_type == \"REG\") %>%\n  group_by(player_id) %>%\n  summarize(\n    name = first(player_name),\n    attempts = sum(attempts),\n    air.yards = sum(passing_air_yards),\n    adot = air.yards / attempts) %>%\n  filter(attempts >= 100) %>%\n  arrange(-adot)\n\ntibble(adot)\n\n# A tibble: 42 x 5\n   player_id  name       attempts air.yards  adot\n   <chr>      <chr>         <int>     <dbl> <dbl>\n 1 00-0035704 D.Lock          111      1117 10.1 \n 2 00-0029263 R.Wilson        400      3955  9.89\n 3 00-0036945 J.Fields        270      2636  9.76\n 4 00-0034796 L.Jackson       382      3531  9.24\n 5 00-0036389 J.Hurts         432      3882  8.99\n 6 00-0034855 B.Mayfield      418      3651  8.73\n 7 00-0026498 M.Stafford      601      5094  8.48\n 8 00-0031503 J.Winston       161      1340  8.32\n 9 00-0034857 J.Allen         646      5295  8.20\n10 00-0029604 K.Cousins       561      4575  8.16\n# ... with 32 more rows\n# i Use `print(n = ...)` to see more rows\n\n\nAs seen in the results, if we ignore Drew Lock’s 10.1 ADOT on just 111 attempts during the 2021 regular season, Russell Wilson attempted to push the ball, on average, furtherst downfield among QBs with atleast 100 attempts."
  },
  {
    "objectID": "a2-nfl-further-reading.html",
    "href": "a2-nfl-further-reading.html",
    "title": "Appendix B — Further Reading Suggestions",
    "section": "",
    "text": "This book is, of course, not comprehensive when it comes to highlighting the R programming language. Because of this, the list below are suggested readings that will increase your knowledge/skill of R."
  },
  {
    "objectID": "a2-nfl-further-reading.html#introduction-to-r-programming-books",
    "href": "a2-nfl-further-reading.html#introduction-to-r-programming-books",
    "title": "Appendix B — Further Reading Suggestions",
    "section": "B.1 Introduction to R Programming Books",
    "text": "B.1 Introduction to R Programming Books\n\nR for Data Science: Import, Tidy, Transform, Visualize, and Model Data\nHands-On Programming with R: Write Your Own Functions and Simulations\nThe Book of R: A First Course in Programming and Statistics\nLearning R: A Step-by-Step Function Guide to Data Analysis\nThe Art of R Programming: A Tour of Statistical Software Design\nAdvanced R (Second Edition)"
  },
  {
    "objectID": "a2-nfl-further-reading.html#data-visualization-in-r-and-visualization-guides",
    "href": "a2-nfl-further-reading.html#data-visualization-in-r-and-visualization-guides",
    "title": "Appendix B — Further Reading Suggestions",
    "section": "B.2 Data Visualization in R and Visualization Guides",
    "text": "B.2 Data Visualization in R and Visualization Guides\n\nR Graphics Cookbook: Practicl Recipes for Visualizing Data\nStorytelling with Data: A Data Visualization Guides for Business Professionals\nBetter Data Visualizations: A Guide for Scholars, Researchers, and Wonks"
  },
  {
    "objectID": "a2-nfl-further-reading.html#sport-analytics-guidesbooks",
    "href": "a2-nfl-further-reading.html#sport-analytics-guidesbooks",
    "title": "Appendix B — Further Reading Suggestions",
    "section": "B.3 Sport Analytics Guides/Books",
    "text": "B.3 Sport Analytics Guides/Books\n\nThe Midrange Theory: Basketball’s Evolution in the Age of Analytics\nAnalyzing Baseball Data with R (2nd edition)\nA Fan’s Guide to Baseball Analytics: Why WAR, WHIP, wOBA, and other Advanced Sabermetrics Are Essential to Understanding Modern Baseball\nThe Book: Playing the Percentages in Baseball\nThe Hidden Game of Baseball: A Revolutionary Approach to Baseball and Its Statistics\nThe Hidden Game of Football: A Revealing and Lively Look at the Pro Game, With New Stats, Revolutionary Strategies, and Keys to Picking the Winners\nMathletics: How Gamblers, Managers, and Fans Use Mathematics in Sports\nBasketball Data Science: With Applications in R\nData Analytics in Football (Soccer): Positional Data Collection, Modelling, and Analysis"
  }
]