# Data Visualization with NFL Analytics

```{r setup-ch4, include = FALSE}

source("R/book-functions.R")

library(tidyverse)
library(nflverse)
library(extrafont)
library(ggrepel)
loadfonts(device="win")
extrafont::loadfonts(quiet = TRUE)
```

Effective data visualization is an important part of any data analysis project as it helps in highlighting key insights into the data, identifying trends, patterns, and anomalies, as while as allowing you to communicate results to the outside world.

Jim Stikeleather, writing for the *Harvard Business Review*, outlined three key elements that make a successful data visualization (albeit, leaving *us* to decide the definition of what a "successful" data visualization is). Despite that philosophical gap, the three elements provided by Stikeleather are succinct enough to allow us to build a framework in this chapter for how to successfully craft an NFL analytics data visualization. In his piece, Stikeleather outlines the following three characteristics of a successful data visualization: it understands the audience, it sets up a clear framework, and it tells a story [@stikeleather2013].

To illustrate the importance of these three elements, let's take a look at example visualizations using NFL data to further contextualize each one.

## Data Viz Must Understand the Audience

As explained by Stikeleather, the core purpose of a data visualization is to take "great quantities of information" and then convey that information in such a way that it is "easily assimilated by the consumers of the information." In other words, the process of data visualization should allow for a great quantity of data to be distilled into an easily consumable (and understandable!) format.

Speaking specifically to NFL analytics, when doing visualizations we must be conscious about whether or not the intended audience will understand the terminology and concepts we use in the plot. For example, most all NFL fans understand the "non-advanced" statistics in the sport. But, when plots start using metrics such as EPA or completion percentage over expected, for example, the audience looking at the plot may very well have little understanding of what is being conveyed.

Because of this, any data viz I create never fails to include "directables" within the plot. These "directables" may be arrows that indicate which trend on the plot are "good" or they can be text within a scatterplot that explains what each quadrant means. Or, for example, I sometimes include a textual explanation of the "equation" used to develop a metric as seen below:

```{r aggressiveness-equation-plot, echo = FALSE}
knitr::include_graphics(rep("images/finished-aggressiveness.png"))
```

The above plot explores which QBs, from the 2020 season, were most aggressive on 3rd down with between 5 to 10 yards to go. Since "aggressiveness" is not a typical, day-to-day metric discussed by NFL fans, I included a "directable" within the subtitle of the plot that explained that the plot, first, was examining just 3rd down pass attempts within a specific yard range. And, second, I made the decision to include how "aggressiveness" was calculated by including the simple equation within the subtitle as well. Doing so allows even the most casual of NFL fans to easily understand what the plot is showing - in this case, that Joe Burrow's 3rd down pass attempts with between 5 to 10 yards to go made it to the line of gain, or more, on 68% of his attempts. On the other hand, Drew Lock and Drew Brees were the least aggressive QBs in the line based on the same metric.

As another example, below is what I deemed my "Uncle Rico Metric" (because who does not like a good Napoleon Dynamite reference?):

```{r uncle-rico-plot, echo = FALSE}
knitr::include_graphics(rep("images/unclerico.png"))
```

## Setting Up for Data Viz

While most of your journey through NFL analytics in this book required you to use the `tidyverse` and a handful of other packages, the process of creating compelling and meaningful data visualizations will require you to utilize multitudes of other packages. Of course, the most important is `ggplot2` which is already installed via the `tidyverse`. However, in order to recreate the visualizations included in this chapter, it is required that you install other R packages. To install the necessary packages, you can run the following code in RStudio:

Need to install: `ggrepel`

## Selecting The Correct Type of Plot

Content coming soon and testing flowchart.

```{mermaid}

flowchart

A[Data Type]
A --> B(Continuous)
A --> C(Discrete)
C --> D(Two Discrete Variables)
D --> E(Relationships)
D --> F(Counts)
E --> G{geom_point}
E --> H{geom_jitter}
C --> I(One Discrete, One Continuous)
I --> J(Distribution)
I --> K(Summary)
J --> L{geom_boxplot}
J --> M{geom_violin}
K --> N{geom_bar}
K --> O{geom_col}
B --> P(Two Continuous Variables)
P --> Q{geom_point}
P --> R{geom_line}
B --> S(One Continuous, One Discrete)
S --> T(Distribution)
S --> U(Summary)
T --> V{geom_boxplot}
T --> W{geom_violin}
U --> X{geom_bar}
B --> Y(One Continuous)
Y --> Z(Histogram)
Y --> AA(Density)
Z --> BB{geom_histogram}
Z --> CC{geom_density}

```

## The Basics of Using `ggplot2`

The basics of any `ggplot` visualization involves three basic calls to information in a dataset as well as stipulation which type of geom you would like to use:

1.  the dataset to be used in the visualization
2.  an aesthetic calls for the x-axis
3.  an aesthetic call for the y-axis
4.  your desired geom type

```{r example-ggplot-call, eval = FALSE, echo = TRUE, output = FALSE}

ggplot(data = 'dataset_name', aes(x = 'x_axsis', y = 'y_axis')) +
  geom_type()
```

To showcase this, let's use data from Sports Info Solutions that pertains quarterback statistic when using play action versus when not using play action. To start, collect the data using the `vroom` function.

```{r gathering-play-action-dat, eval = TRUE, echo = TRUE, output = FALSE}

play_action_data <- vroom::vroom("https://raw.githubusercontent.com/bcongelio/nfl-analytics-with-r-book/origin/example_data/csv/play_action_data.csv")
```

To provide an easy-to-understand example of building a visualization with `ggplot`, let's use each QB's total yardage when using play action and when not. In this case, our two variable names are `yds` and `pa_yds` with the `yds` variable being place on the x-axis and the `pa_yds` variable being placed on the y-axis.

::: callout-tip
It is important to remember which axis is which as you begin to learn using `ggplot`:

The x-axis is the horizontal axis that runs left-to-right.

The y-axis is the vertical axis that runs top-to-bottom.
:::

```{r example-pa-action-plot, output = TRUE, fig.align='center', fig.dpi = 300}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point()
```

## Building A Data Viz: A Step-by-Step Process

The outputted scatter plot is an excellent starting point for a more finely detailed visualization. While we are able to see the relationship between non-play action passing yards and those attempts that included play action, we are unable to discern which specific point is which quarterback - among other issues. To provide more detail and to "prettify" the plot, let's discuss doing the following:

::: callout-note
Our data visualization "to do list":

1.  Adding team colors to each point.
2.  Increasing the size of each point.
3.  Adding player names to each point.
4.  Increasing the number of ticks on each axis.
5.  Provide the numeric values in correct format (that is, including a `,` to correctly show thousands).
6.  Rename the title of each axis.
7.  Provide a title, subtitle, and caption for the plot.
8.  Add mean lines to both the x-axis and y-axis
9.  Change `theme` elements to make data viz more appealing.
:::

### Adding Team Colors to Each Point

::: callout-note
Much like anything in the R language, there are multiple ways to go about add team colors (and logos, player headshots, etc.) to visualizations.

First, we can merge team color information into our `play_action_data` and then manually set the colors in our `geom_point` call.

Second, we can conduct the same merge but then use the `nflplotRr` package (which is part of the `nflverse`) to bring the colors in.

Both examples will be included in the below example. However, please note that I typically *do not* use the `nflplotR` package in scatter plots as, in certain circumstances, adding the colors manually provides the necessary control that `nflplotR` sometimes cannot provide.

That said, the power of `nflplotR` is extremely evident when working with team logos and/or player headshots (which will be covered later in this chapter).
:::

To start, we will load team information using the `load_teams` function within `nflreadr`. In this case, we are requesting that the package provide only the 32 current NFL teams with by including the `current = TRUE` argument. Conversely, setting the argument to `current = FALSE` will result in historical NFL teams being included in the data (the Oakland Raiders and St. Louis Rams, for example, will be included in the data). We will also use the `select` verb from `dplyr` to gather just the variables we know we will need (`team_abbr`, `team_nick`, `team_color`, and `team_color2`.

::: callout-important
We are only including the `team_abbr` variable in this example because we are going to create the plot both with and without the use of `nflplotR`. As of the writing of this book, the newest development version of the package is 1.1.0.9004 and does not yet (if ever) provide support to use team nicknames. Because of this, we must include `team_abbr` in our merge since it is the team name version that is standardized for use in `nflplotr`.
:::

After collecting the team information needed, we can conducted a `left_join` to match the information by `team` in `play_action_data` and `team_nick` in the team information from `load_teams()` and then confirm the merge was successful by viewing the columns names in `play_action_data` with `colnames()`.

```{r merging-team-data-for-plot, eval = TRUE, echo = TRUE, output = FALSE}

teams <- nflreadr::load_teams(current = TRUE) %>%
  select(team_abbr, team_nick, team_color, team_color2)

play_action_data <- play_action_data %>%
  left_join(teams, by = c("team" = "team_nick"))

colnames(play_action_data)
```

With the team color information now built into our `play_action_data`, we can incorporate the team color specific to each point by including the `color` argument within our `geom_point`.

```{r adding-team-color-no-nflplotr, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(color = play_action_data$team_color)
```

::: callout-important
You may notice that we used the the `$` special operator to extract the `team_color` information within our `play_action_data` dataframe. This is an extremely important distinction, as using the `aes()` argument from `ggplot` and not using the `$` operator will result in a custom scale color being applied to each team, without the correct team colors associating with the correct team.

To see this for yourself, you can run the example following code. Remember, this is an incorrect approach and serves to only highlight why the `$` special operator was used in the above code.

```{r incorrect-use-of-aes, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(aes(color = team_color))
```
:::

As mentioned, the same result can be achieved using the `nflplotR` package. The following code will do so:

```{r adding-color-with-nflplotr, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(aes(color = team_abbr)) +
  nflplotR::scale_color_nfl(type = "primary")
```

In the above example, you will notice that we are including the team color information in an `aes()` call within the `geom_point()` function. This is because we ultimately control the specific of the custom scale through the use of `scale_color_nfl` in the `nflplotR` package, which also allows us to select whether we want to display the primary or secondary team color.

Given the two examples above, a couple items regarding the use of `nflplotR` should become apparent.

1.  If your data already includes team names in `team_abbr` format (that is: BAL, CIN, DET, DAL, etc.), then using `nflplotR` is likely a more efficient option as you do not need to merge in team color information. In other words, our `play_action_data` information could contain just the variables for `player`, `team_abbr`, `yds`, and `pa_yds` and `nflplotR` would still work as the package, "behind the scenes", will automatically correlate the `team_abbr` with the correct color for each team.
2.  However, if your data does not include teams in `team_abbr` format and you must merge in information manually, it is likely more efficient to use the `$` special operator to bring the team colors in without using the `aes()` call within `geom_point()`.

Finally, because we have both `team_color` and `team_color2` - the primary and secondary colors for each team - in the data, we can get fancy and create points that are filled with the primary team color and outlined by the secondary team color. Doing so simply requires changing the type of our `geom_point`. In the below example, we are specifying that we want a specific type of `geom_point` by using `shape = 21` and then providing the `fill` color and the outline color with `color`. In each case, we are again using the `$` special operator to select the primary and secondary color associated with each team.

```{r adding-shape-21-to-plot, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2)
```

With team colors correctly associated with each point, we can turn back to our "to do list" to see what part of the job is next.

::: callout-note
Our data visualization "to do list":

1.  ~~Adding team colors to each point.~~

2.  Increasing the size of each point.

3.  Adding player names to each point.

4.  Increasing the number of ticks on each axis.

5.  Provide the numeric values in correct format (that is, including a , to correctly show thousands).

6.  Rename the title of each axis.

7.  Provide a title, subtitle, and caption for the plot.

8.  Add mean lines to both the x-axis and y-axis.

9.  Change `theme` elements to make data viz more appealing.
:::

### Increasing The Size of Each Point

Determining when and how to resize the individual points in a scatterplot is a multifaceted decision. To that end, there is no hard and fast rule for doing so as it depends on both the specific goals and context of the visualization. There are, however, some general guidelines to keep in mind:

1.  Data density: if you have a lot of data points within your plot, making the points smaller may help to reduce issues of overlapping/overplotting. Not only is this more aesthetically pleasing, but it can also help in making it easier to see patterns.
2.  Important of individual points: if certain points within the scatterplot are important, we may want to increase the size of those specific points to make them standout.
3.  Visual aesthetics: the size of the points can be adjusted simply for visual appeal.
4.  Contextual factors: can the size of the points be used to highlight even more uniqueness in the data? For example, given the right data structure, we can size individual dots to show the spread in total attempts across the quarterbacks.

Given the above guidelines, the resizing of the points in our `play_action_data` dataframe is going to be a strictly aesthetic decision. We cannot, as mentioned above, alter the size of each specific points based on each quarterback's number of attempts as the data provides attempts for *both* play action and non-play action passes. Moreover, we *could* create a new column that add both attempt numbers to get a QB's cumulative total but that does not have a distinct correlation to the data on either axis.

::: callout-caution
For the sake of educational purposes, we can alter the size of each specific point to correlate to the total number of play action attempts for each quarterback (and then divide this by 25 in order to decrease the size of the points to fit them all onto the plot).

Again: it is important to point out that this not a good approach to data visualization, as the size of the dots correlates to just one of the variables being explored in the plot.

```{r incorrect-use-of-sizing, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = play_action_data$pa_att / 25)
```
:::

In order to maintain correct visualization standards, we can resize the points for nothing more than aesthetic purposes (that is: making them bigger so they are easier to see). To do so, we still add the `size` argument to our `geom_point` but simply provide a numeric value to apply uniformly across all the points. To process of selecting the numeric value is a case of trial and error - inputting and running, changing and running, and changing and running again until you find the size that provides easier to see points without adding overlap into the visualization.

```{r adding-correct-size-to-points, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = 4.5)
```

With the size of each point adequately adjusted, we can move on to the next part of our data visualization "to do list."

::: callout-note
Our data visualization "to do list":

1.  ~~Adding team colors to each point.~~

2.  ~~Increasing the size of each point.~~

3.  Adding player names to each point.

4.  Increasing the number of ticks on each axis.

5.  Provide the numeric values in correct format (that is, including a , to correctly show thousands).

6.  Rename the title of each axis.

7.  Provide a title, subtitle, and caption for the plot.

8.  Add mean lines to both the x-axix and y-axis.

9.  Change `theme` elements to make data viz more appealing.
:::

### Adding Player Names to Each Point

While the our current plot includes team-specific colors for the points, we are still not able to discern - for the most part - which player belongs to which point. To rectify this, we will turn to using the `ggrepel` package, which is designed to improve the readability of text labels on plots by automatically repelling overlapping labels, if any. To that end, `ggrepel` operates out of two main functions: `geom_text_repel` and `geom_label_repel`. Both provide the same end result, with the core different being `geom_label_repel` adding a customized label under each player's name.

We can do a bare minimum addition of the player names by adding one additional line of code using `geom_text_repel` and wrapping it in an `aes()` call and specifying which variable in the `play_action_data` is the `label` we would like to display.

```{r basic-addition-of-player-name, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = 4.5) +
  geom_text_repel(aes(label = player))
```

While it is a good first attempt at adding the names, many of them are awkwardly close to the respective point. Luckily, the `ggrepel` package provides plenty of built-in customization options:

| `ggrepel` Option[^04-nfl-analytics-visualization-1] |                            Description of Option                            |
|:---------------------:|:----------------------------------------------:|
|                        seed                         | a random numeric seed number for the purposes of recreating the same layout |
|                        force                        |             force of repulsion between overlapping text labels              |
|                     force_pull                      |       force of attraction between each text label and its data point        |
|                      direction                      |            move the text labels in either "x" or "y" directions             |
|                       nudge_x                       |          adjust the starting x-axis starting position of the label          |
|                       nudge_y                       |          adjust the starting y-axis starting position of the label          |
|                     box.padding                     |                        padding around the text label                        |
|                    point.padding                    |                    padding around the labeled data point                    |
|                        arrow                        |                    renders the line segment as an arrow                     |

[^04-nfl-analytics-visualization-1]: As listed on the `ggrepel` website: <https://ggrepel.slowkow.com/articles/examples.html>

Of the above options, the our current issue with name and point spacing can be resolved by including a numeric value to the `box.padding`. Moreover, we can control the look and style of the text (such as size, font family, font face, etc.) in much the same way. To make these changes, we can set the `box.padding` to 0.45, set the size of the text to 3 using `size` as well as switch the font to 'Roboto Condensed' using `family`, and - finally - make it bold using `fontface`.

```{r add-ggrepel-options, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = 4.5) +
  geom_text_repel(aes(label = player),
                  box.padding = 0.45,
                  size = 3,
                  family = "Roboto Condensed",
                  fontface = "bold")
```

The plot, as is, is understandable in that we are able to associate each point with a specific quarterback to examine how a quarterback's total passing yardage is split between play action and non-play action passes. While the graph could hypothetically "standalone" as is - minus a need for a title - we can still do work on it to make it more presentable. Let's return to our data visualization "to do list."

::: callout-note
Our data visualization "to do list":

1.  ~~Adding team colors to each point.~~

2.  ~~Increasing the size of each point.~~

3.  ~~Adding player names to each point.~~

4.  Increasing the number of ticks on each axis.

5.  Provide the numeric values in correct format (that is, including a , to correctly show thousands).

6.  Rename the title of each axis.

7.  Provide a title, subtitle, and caption for the plot.

8.  Add mean lines to both x-axis and y-axis.

9.  Change `theme` elements to make data viz more appealing.
:::

### Editing Axis Ticks and Values

Because steps 4 and 5 from the above "to do list" can be accomplished with the same package, we will lump both together and complete them at once.

Let's first examine the idea of increasing the number of ticks on each axis. The "axis ticks" refer to the specific spots on each axis wherein a numeric datapoint resides. With our current visualization, we currently have "1000, 2000, 3000" on the x-axis and "400, 800, 1200, 1600" on the y-axis.

We may want to increase the number of axis ticks in this visualization as it can provide a more detailed view of the data being presented. Typically, increasing the number of tickets will show more granularity in the data and make it easier to interpret the values represented by each point. In this specific case, we can look at the cluster of points represented by Andy Dalton, Mac Jones, and Matt Ryan. Given the current structure of the axis ticks, we can guess that Matt Ryan has roughly 2,500 yards on non-play action passing attempts. Given we know Matt Ryan's amount, we can make guesses that Andy Dalton may be around 2,300 and Mac Jones somewhere between the two.

By increasing the number of values on each axis, we have the ability to see more specific results. Conversely, we must be careful to not add too many so that the data becomes overwhelming to interpret. Much like the size of `geom_point` was a case of trial and error, so is selecting an appropriate amount of ticks.

However, before implementing these changes, we need to segue into a discussion on continuous and discrete data.

::: callout-important
When implementing changes to either the x- or y-axis in `ggplot`, you will be working with either continuous or discrete data, and using the `scale_x_continuous` or `scale_x_discrete` functions (or replacing `x` with `y` when working with the opposite axis). In either case, both functions allow you to customize the axis of a plot but are used for different types of data.

`scale_x_continuous` is used for continuous (or numeric) data, where the axis is represented by a continuous range of numeric values. The values within a continuous axis can take on any number within the given range.

`scale_x_discrete` is used for discrete data (or often character-based data). You will see this function used when working with variables such as player names, teams, college names, etc. In any case, discrete data is limited to a specific set of categories.

Please know that `ggplot` will throw an error if you try to apply a continuous scale to discrete data, or the opposite, that reads: `Error: Discrete value supplied to continuous scale`.
:::

In the case of our current plot, we now know we will be using the `scales_x_continuous` and `scale_y_continuous` functions as both contain continuous (numeric) data. To make the changes, we can turn to the `scales` package and its `pretty_breaks` function to change the number of "breaks" (or ticks) on each axis. By placing `n = 6` within the `pretty_breaks` argument, we are requesting a total of six axis ticks on both the x- and y-axis.

```{r add-breaks-with-scales, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = 4.5) +
  geom_text_repel(aes(label = player),
                  box.padding = 0.45,
                  size = 3,
                  family = "Roboto Condensed",
                  fontface = "bold") +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 6)) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6))
```

Despite our request to build the plot with six ticks on each axis, you will see the generated visualization includes seven on the x-axis and eight on the y-axis. *This does not mean your code with `pretty_breaks`* *did not work*. Instead, the `pretty_breaks` function is designed to internally determine the best axis tick optimization based on your requested number. To that end, the function - "under the hood" - determined that seven and eight ticks, respectively, was the most optimized way to display the data given our desire to have at least six on each.

With the number of axis ticks corrected, we can turn our attention to getting the labels of the axis ticks into correct numeric format. Within the same `scale_x_continuous` or `scale_y_continuous` arguments, we will use the `labels` function, combined with another tool from the `scales` package to make the adjustments.

```{r add-commas-to-values, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = 4.5) +
  geom_text_repel(aes(label = player),
                  box.padding = 0.45,
                  size = 3,
                  family = "Roboto Condensed",
                  fontface = "bold") +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 6),
                     labels = scales::label_comma()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6),
                     labels = scales::label_comma())
```

By adding a `labels` option to both `scale_x_continuous` and `scale_y_continuous`, we can use the `label_comma()` option from within the `scales` package to easily add a comma into numbers that are in the thousands.

With much of the heavy lifting for our visualization now complete, we can move on to the final steps in our "to do list."

::: callout-note
**Our data visualization "to do list":**

1.  ~~Adding team colors to each point.~~

2.  ~~Increasing the size of each point.~~

3.  ~~Adding player names to each point.~~

4.  ~~Increasing the number of ticks on each axis.~~

5.  ~~Provide the numeric values in correct format (that is, including a , to correctly show thousands).~~

6.  Rename the title of each axis.

7.  Provide a title, subtitle, and caption for the plot.

8.  Add mean lines to both x-axis and y-axis.

9.  Change `theme` elements to make data viz more appealing.
:::

### Changing Axis Titles and Adding Title, Subtitle, and Caption

Much like our last section, we can work on changing the title of each axis and adding a title, subtitle, and caption for the plot within one section, as all this is added and/or changed by using `labs()`.

```{r using-labs-for-title-caption-sub, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = 4.5) +
  geom_text_repel(aes(label = player),
                  box.padding = 0.45,
                  size = 3,
                  family = "Roboto Condensed",
                  fontface = "bold") +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 6),
                     labels = scales::label_comma()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6),
                     labels = scales::label_comma()) +
  labs(x = "Non-Play Action Yards",
       y = "Play Action Yards",
       title = "Cumulative Passing Yards",
       subtitle = "Non-Play Action vs. Play Action",
       caption = "An Introduction to NFL Analytics with R - Brad J. Congelio")
```

Within the new `labs()`, we are placing a total of five items: `x` (allowing us to name the x-axis outside the confines of what it is called in the beginning `aes()` call, `y` (allowing us to name the y-axis), `title` (allowing us to add a title to the top of the plot), `subtitle` (allowing us to add a subtitle below the title and provide more contextual information), and `caption` (allowing us to provide information about where the graph come from and who designed it). We will explore ways to change the font, size, color, and more of these items when we move on to the last item of our "to do list."

::: callout-note
**Our data visualization "to do list":**

1.  ~~Adding team colors to each point.~~

2.  ~~Increasing the size of each point.~~

3.  ~~Adding player names to each point.~~

4.  ~~Increasing the number of ticks on each axis.~~

5.  ~~Provide the numeric values in correct format (that is, including a , to correctly show thousands).~~

6.  ~~Rename the title of each axis.~~

7.  ~~Provide a title, subtitle, and caption for the plot.~~

8.  Add mean lines to both x-axis and y-axis.

9.  Change theme elements to make data viz more appealing.
:::

### Adding Mean Lines to Both x-axis and y-axis

Adding mean (or average) lines to both the x-axis and y-axis allows us to visualize where each quarterback falls within one of four sections (according to the amount of passing yards in both situations). Adding the lines is done by add two additional geoms to the existing plot (in this case `geom_hline` and `geom_vline`).

```{r add-avg-lines-incorrectly, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
   geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = 4.5) +
  geom_text_repel(aes(label = player),
                  box.padding = 0.45,
                  size = 3,
                  family = "Roboto Condensed",
                  fontface = "bold") +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 6),
                     labels = scales::label_comma()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6),
                     labels = scales::label_comma()) +
  labs(x = "Non-Play Action Yards",
       y = "Play Action Yards",
       title = "Cumulative Passing Yards",
       subtitle = "Non-Play Action vs. Play Action",
       caption = "An Introduction to NFL Analytics with R - Brad J. Congelio") +
  geom_hline(yintercept = mean(play_action_data$pa_yds), linewidth = .8, color = "black", linetype = "dashed") +
  geom_vline(xintercept = mean(play_action_data$yds), linewidth = .8, color = "black", linetype = "dashed")
```

In the above output, we used `geom_hline` and `geom_vline` to draw a dashed line at the average for both `pa_yds` at the `yintercept` and `yds` at the `xintercept`. Because of this, we can see that - for example - Marcus Mariota is above average for play action yards, but below average for non-play action yards. Additionally, Matthew Stafford, Baker Mayfield, Kyler Murray, and many others are all below average in both metrics while Jared Goff, Justin Herbert, Patrick Mahomes, and others are well above average in both.

However, adding the `geom_hline` and `geom_vline` at the very end of the `ggplot` code creates an issues (and one I've intentionally created for the purposes of education). As you look at the plot, you will see that the dashed line runs **on top** of the names and dots in the plot. This is because `ggplot` follows a very specific ordering of layering.

::: callout-important
In `ggplot`, it is important to remember that items in a plot are layered in the order in which they are added to the plot. This process of layering is important because it ultimately determines which items end up on top of others, which can have significant implications on the visual appearance of the plot.

As we've seen so far in the process, each layer of a plot is added by including a `geom_`. The first layer added will *always* be at the very bottom of the plot, with each additional layer building on top of the previous layers.
:::

Because of the important layering issue highlighted above, it is visually necessary for us to move the `geom_hline` and `geom_vline` to the beginning of the `ggplot` code so both are layered underneath everything else in the plot (`geom_point` and `geom_text_repel` in this case). As well, we can apply the `alpha` option to each to slightly decrease each line's transparency.

```{r correctly-adding-avg-lines, output = TRUE, fig.align='center', fig.dpi = 400}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_hline(yintercept = mean(play_action_data$pa_yds), 
             linewidth = .8, 
             color = "black", 
             linetype = "dashed",
             alpha = 0.5) +
  geom_vline(xintercept = mean(play_action_data$yds), 
             linewidth = .8, 
             color = "black", 
             linetype = "dashed",
             alpha = 0.5) +
   geom_point(shape = 21,
             fill = play_action_data$team_color,
             color = play_action_data$team_color2,
             size = 4.5) +
  geom_text_repel(aes(label = player),
                  box.padding = 0.45,
                  size = 3,
                  family = "Roboto Condensed",
                  fontface = "bold") +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 6),
                     labels = scales::label_comma()) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 6),
                     labels = scales::label_comma()) +
  labs(x = "Non-Play Action Yards",
       y = "Play Action Yards",
       title = "Cumulative Passing Yards",
       subtitle = "Non-Play Action vs. Play Action",
       caption = "An Introduction to NFL Analytics with R - Brad J. Congelio")
```

By moving the average lines to the top of our `ggplot` code, both are now layered under the other two `geom_` and are not visually impacting the final plot. We can now move onto the final item on our data visualization "to do list."

::: callout-note
**Our data visualization "to do list":**

1.  ~~Adding team colors to each point.~~

2.  ~~Increasing the size of each point.~~

3.  ~~Adding player names to each point.~~

4.  ~~Increasing the number of ticks on each axis.~~

5.  ~~Provide the numeric values in correct format (that is, including a , to correctly show thousands).~~

6.  ~~Rename the title of each axis.~~

7.  ~~Provide a title, subtitle, and caption for the plot.~~

8.  ~~Add mean lines to both x-axis and y-axis.~~

9.  Change theme elements to make data viz more appealing.
:::

### Making Changes to Theme Elements

Content to be uploaded soon.

## Using Team Logos in Plots

To explore the process of placing team logos into a plot, let's stick with our previous example of working with play action passing data but explore it at the team level rather than individual quarterbacks. To gather the data, we can use `vroom` to read it in from the book's GitHub.

```{r gathering-team-play-action, eval = TRUE, echo = TRUE, output = FALSE}

team_playaction <- vroom::vroom("https://raw.githubusercontent.com/bcongelio/nfl-analytics-with-r-book/origin/example_data/csv/team_playaction.csv")

team_playaction
```

The resulting `team_playaction` data contains nearly identical information to the previous QB-level data. However, there is a slight change in how Sports Info Solutions charts passing yards on the team level. You will notice a column for both `net_yds` and `gross_yds`. When charting passing attempts in football, a player's individual passing yards are aggregated under **gross yards** with all lost yardage resulting from a sack being included. On the other hand, team passing yards are always presented in **net yards** and any lost yardage from sacks are not included. Case in point, the `gross_yds` number in our `team_playaction` data is greater than the `net_yds` for all 32 NFL teams. In any case, we will build our data visualization using `net_yds`.

In order to include team logos in the plot, we must first merge in team logo information (again with the understanding that we could use `nflplotR` if team abbreviations were included in the data). We can collect the team logo information using the `load_teams()` function within `nflreadR`. There are three different variations of each team's logo available in the resulting data: (1.) the logo from ESPN, (2.) the logo from Wikipedia, (3.) a pre-edited version of the logo that is cropped into a square.

::: callout-note
**There are slight differences in disk space, pixels, and utility in the provided ESPN, Wikipedia, and squared versions of the logos.**

The Wikipedia versions are, generally, smaller in size. The Arizona Cardinals logo, for example, is just 9.11 KB in size from Wikipedia while the ESPN version of the logo is 20.6 KB. This difference is disk size is the result of each images dimensions and pixels. The ESPN version, with the larger disk size, is also a higher quality image that is scaled in 500x500 dimensions (and 500 pixels). The Wikipedia version is scaled in 179x161 dimensions at 179 pixels and 161 pixels, respectively. The squared version of the logo is a 200x200 image at 200 pixels with a background matching the team's primary color.

What does this mean? The ESPN version of the logo is better for those applications where the logo will be large and you do not want any loss of quality. The Wikipedia version, conversely, is better suited for applications like our: for use in a small-scale data visualization. We do not plan on "blowing up" the image, thus losing quality and the smaller disk space size of the images allows for a slightly quicker rendering time when we use the `ggimage` package. While sparingly used, the squared version of the logo can be used in certain data visualization applications that requires the team logo to quickly and easily "merge" into the background of the plot (more on this later in this chapter, though).
:::

more content arriving this weekend.
