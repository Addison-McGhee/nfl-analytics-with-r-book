# Data Visualization with NFL Analytics

```{r loading-library, include = FALSE}

library(tidyverse)
library(nflreadr)

```

```{r setup-dataviz, include = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)

source("book-functions.R")


```

Effective data visualization is an important part of any data analysis project as it helps in highlighting key insights into the data, identifying trends, patterns, and anomalies, as while as allowing you to communicate results to the outside world.

Jim Stikeleather, writing for the *Harvard Business Review*, outlined three key elements that make a successful data visualization (albeit, leaving *us* to decide the definition of what a "successful" data visualization is). Despite that philosophical gap, the three elements provided by Stikeleather are succinct enough to allow us to build a framework in this chapter for how to successfully craft an NFL analytics data visualization. In his piece, Stikeleather outlines the following three characteristics of a successful data visualization: **it understands the audience, it sets up a clear framework, and it tells a story** [@stikeleather2013].

To illustrate the importance of these three elements, let's take a look at example visualizations using NFL data to further contextualize each one.

## Data Viz Must Understand the Audience

As explained by Stikeleather, the core purpose of a data visualization is to take "great quantities of information" and then convey that information in such a way that it is "easily assimilated by the consumers of the information." In other words, the process of data visualization should allow for a great quantity of data to be distilled into an easily consumable (and understandable!) format.

Speaking specifically to NFL analytics, when doing visualizations we must be conscious about whether or not the intended audience will understand the terminology and concepts we use in the plot. For example, most all NFL fans understand the "non-advanced" statistics in the sport. But, when plots start using metrics such as EPA or completion percentage over expected, for example, the audience looking at the plot may very well have little understanding of what is being conveyed.

Because of this, any data viz I create never fails to include "directables" within the plot. These "directables" may be arrows that indicate which trend on the plot are "good" or they can be text within a scatterplot that explains what each quadrant means. Or, for example, I sometimes include a textual explanation of the "equation" used to develop a metric as seen below:

```{r aggressiveness-equation-plot, echo = FALSE}
knitr::include_graphics(rep("images/finished-aggressiveness.png"))

```

The above plot explores which QBs, from the 2020 season, were most aggressive on 3rd down with between 5 to 10 yards to go. Since "aggressiveness" is not a typical, day-to-day metric discussed by NFL fans, I included a "directable" within the subtitle of the plot that explained that the plot, first, was examining just 3rd down pass attempts within a specific yard range. And, second, I made the decision to include how "aggressiveness" was calculated by including the simple equation within the subtitle as well. Doing so allows even the most casual of NFL fans to easily understand what the plot is showing - in this case, that Joe Burrow's 3rd down pass attempts with between 5 to 10 yards to go made it to the line of gain, or more, on 68% of his attempts. On the other hand, Drew Lock and Drew Brees were the least aggressive QBs in the line based on the same metric.

As another example, below is what I deemed my "Uncle Rico Metric" (because who does not like a good Napoleon Dynamite reference?):

```{r uncle-rico-plot, echo = FALSE}
knitr::include_graphics(rep("images/unclerico.png"))
```

## Setting Up for Data Viz

While most of your journey through NFL analytics in this book required you to use the `tidyverse` and a handful of other packages, the process of creating compelling and meaningful data visualizations will require you to utilize multitudes of other packages. Of course, the most important is `ggplot2` which is already installed via the `tidyverse`. However, in order to recreate the visualizations included in this chapter, it is required that you install other R packages. To install the necessary packages, you can run the following code in RStudio:

Remaining content coming soon.

## Selecting The Correct Type of Plot

Content coming soon.

## The Basics of Using `ggplot2`

The basics of any `ggplot` visualization involves three basic calls to information in a dataset as well as stipulation which type of geom you would like to use:

1.  the dataset to be used in the visualization
2.  an aesthetic calls for the x-axis
3.  an aesthetic call for the y-axis
4.  your desired geom type

```{r example-ggplot-call, eval = FALSE, echo = TRUE, output = FALSE}

ggplot(data = 'dataset_name', aes(x = 'x_axsis', y = 'y_axis')) +
  geom_type()
```

To showcase this, let's use data from Sports Info Solutions that pertains quarterback statistic when using play action versus when not using play action. To start, collect the data using the `vroom` function.

```{r gathering-play-action-dat, eval = TRUE, echo = TRUE, output = FALSE}

play_action_data <- vroom::vroom("https://raw.githubusercontent.com/bcongelio/nfl-analytics-with-r-book/origin/example_data/csv/play_action_data.csv")
```

To provide an easy-to-understand example of building a visualization with `ggplot`, let's use each QB's total yardage when using play action and when not. In this case, our two variable names are `yds` and `pa_yds` with the `yds` variable being place on the x-axis and the `pa_yds` variable being placed on the y-axis.

::: callout-tip
It is important to remember which axis is which as you begin to learn using `ggplot`:

**The x-axis is the horizontal axis that runs left-to-right.**

**The y-axis is the vertical axis that runs top-to-bottom.**
:::

```{r example-pa-action-plot, output = TRUE, fig.align='center', fig.dpi = 300}

ggplot(data = play_action_data, aes(x = yds, y = pa_yds)) +
  geom_point()
```

The outputted scatter plot is an excellent starting point for a more finely detailed visualization. While we are able to see the relationship between non-play action passing yards and those attempts that included play action, we are unable to discern which specific dot is which quarterback - among other issues. To provide more detail and to "prettify" the plot, let's discuss doing the following:

1.  Adding team colors to each dot.
2.  Adding player names to each dot.
3.  Increasing the number of ticks on each axis.
4.  Provide the numeric values in correct format (that is, including a `,` to correctly show thousands).
5.  Rename the title of each axis.
6.  Provide a title, subtitle, and caption for the plot.
7.  Change the background and grid to be more visually stunning.

### Adding Team Colors to Each Dot

::: callout-note
Much like anything in the R language, there are multiple ways to go about add team colors (and logos, player headshots, etc.) to visualizations.

First, we can merge team color information into our `play_action_data` and then manually set the colors in our `geom_point` call.

Second, we can conduct the same merge but then use the `nflplotr` package (which is part of the `nflverse`) to bring the colors in.

Both examples will be included in the below example. However, **please note that I typically *do not* use the `nflplotr`** **package as, in certain circumstances, adding the colors manually provides the necessary control that `nflplotr`** **sometimes cannot provide.**
:::

To start, we will load team information using the `load_teams` function within `nflreadr`. In this case, we are requesting that the package provide only the 32 current NFL teams with by including the `current = TRUE` argument. Conversely, setting the argument to `current = FALSE` will result in historical NFL teams being included in the data (the Oakland Raiders and St. Louis Rams, for example, will be included in the data). We will also use the `select` verb from `dplyr` to gather just the variables we know we will need (`team_abbr`, `team_nick`, `team_color`, and `team_color2`.

::: callout-important
We are only including the `team_abbr` variable in this example because we are going to create the plot both with and without the use of `nflplotr`. As of the writing of this book, the newest development version of the package is 1.1.0.9004 and does not yet (if ever) provide support to use team nicknames. Because of this, we must include `team_abbr` in our merge since it is the team name version that is standardized for use in `nflplotr`.
:::

After collecting the team information needed, we can conducted a `left_join` to match the information by `team` in `play_action_data` and `team_nick` in the team information from `load_teams()` and then confirm the merge was successful by viewing the columns names in `play_action_data` with `colnames()`.

```{r merging-team-data-for-plot, eval = TRUE, echo = TRUE, output = FALSE}

teams <- nflreadr::load_teams(current = FALSE) %>%
  select(team_abbr, team_nick, team_color, team_color2)

play_action_data <- play_action_data %>%
  left_join(teams, by = c("team" = "team_nick"))

colnames(play_action_data)
```
